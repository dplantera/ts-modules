// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateZod generates test/specs/generic/api.yml: /generic/api 1`] = `
"import { z } from 'zod'
import * as zc from './common.js'

export module Schemas {
    export const PetBase = z.object({ id: z.number().int().min(1), type: z.string() });
    export const GenericPet = PetBase.merge(z.object({ name: z.string().optional(), type: z.enum(['BIRD', 'HAMSTER']) }));
    export const Dog = PetBase.merge(z.object({ bark: z.string(), type: z.literal('DOG') }));
    export const ShortHair = z.object({ color: z.string(), catType: z.literal('SHORT'), angryLevel: z.string().optional(), type: z.literal('CAT') });
    export const Seam = PetBase.merge(z.object({ color: z.string(), catType: z.literal('SEAM'), angryLevel: z.string().regex(/\\w+/).optional(), type: z.literal('CAT') }));
    export const Cat = zc.ZodUnionMatch.matcher("catType", { 'SEAM': Seam, 'SHORT': ShortHair, onDefault: z.object({ catType: z.string().brand("UNKNOWN") }) }).passthrough();
    export const Pet = zc.ZodUnionMatch.matcher("type", { 'DOG': Dog, 'BIRD': GenericPet, 'HAMSTER': GenericPet, onDefault: z.object({ type: z.string().brand("UNKNOWN") }) }).passthrough();
    export const Pets = z.array(Pet).max(100);

    export module Types {
        export type PetBase = z.infer<typeof Schemas.PetBase>;
        export type GenericPet = z.infer<typeof Schemas.GenericPet>;
        export type Dog = z.infer<typeof Schemas.Dog>;
        export type ShortHair = z.infer<typeof Schemas.ShortHair>;
        export type Seam = z.infer<typeof Schemas.Seam>;
        export type Cat = z.infer<typeof Schemas.Cat>;
        export type Pet = z.infer<typeof Schemas.Pet>;
        export type Pets = z.infer<typeof Schemas.Pets>;
    }

}
"
`;

exports[`generateZod generates test/specs/pets-modular/pets-api.yml: /pets-modular/pets-api 1`] = `
"import { z } from 'zod'
import * as zc from './common.js'

export module Schemas {
    export const PetBase = z.object({ type: z.string(), name: z.string().optional() });
    export const DogEnum = z.enum(['DOG_A', 'DOG_B']);
    export const Dog = PetBase.merge(z.object({ fluffy: z.boolean().optional(), dogEnum: DogEnum, type: z.literal('DOG') }));
    export const Cat = PetBase.merge(z.object({ breed: z.enum(['CAT_A', 'CAT_B']).optional(), type: z.literal('CAT') }));
    export const Pet = zc.ZodUnionMatch.matcher("type", { 'CAT': Cat, 'DOG': Dog, onDefault: z.object({ type: z.string().brand("UNKNOWN") }) }).passthrough();

    export module Types {
        export type PetBase = z.infer<typeof Schemas.PetBase>;
        export type DogEnum = z.infer<typeof Schemas.DogEnum>;
        export type Dog = z.infer<typeof Schemas.Dog>;
        export type Cat = z.infer<typeof Schemas.Cat>;
        export type Pet = z.infer<typeof Schemas.Pet>;
    }

}
"
`;

exports[`generateZod generates test/specs/pets-modular-complex/petstore-api.yml: /pets-modular-complex/petstore-api 1`] = `
"import { z } from 'zod'
import * as zc from './common.js'

export module Schemas {
    export const FluffLevel = z.enum(['A', 'B', 'C']);
    export const SchemasToy = z.object({ id: z.string(), price: z.string(), kind: z.string(), fluffLevel: FluffLevel, targetGroup: z.string().optional(), someEnum: z.enum(['FOO', 'BAR']).optional() });
    export const FluffyTeddy = z.object({ id: z.string(), price: z.string(), kind: z.literal('TEDDY'), fluffLevel: FluffLevel, targetGroup: z.string().optional() });
    export const Ball = z.object({ id: z.string(), price: z.string(), kind: z.literal('BALL'), fluffLevel: FluffLevel, targetGroup: z.string().optional() });
    export const PetToy = zc.ZodUnionMatch.matcher("kind", { 'BALL': Ball, 'TEDDY': FluffyTeddy, onDefault: z.object({ kind: z.string().brand("UNKNOWN") }) }).passthrough();
    export const SchemaUntitled = z.object({ untitledProp: z.string().optional() });
    export const Color = z.object({ untitledProp: z.string().optional(), colorId: z.string().optional(), schemaUntitled: SchemaUntitled });
    export const TargetGroup = z.string();
    export const ComponentsSchemasToy = z.object({ id: z.string(), price: z.string(), kind: z.string(), fluffLevel: FluffLevel, targetGroup: TargetGroup, someEnum: z.enum(['FOO', 'BAR']).optional(), subId: z.string().optional(), name: z.string().optional(), color: Color, petToy: PetToy });
    export const Pet = z.object({ id: z.number().int(), componentsSchemasToy: ComponentsSchemasToy, schemasToy: SchemasToy, fluffLevel: FluffLevel, tag: z.string().optional(), name: z.string() });
    export const Pets = z.array(Pet).max(100);
    export const SchemaTitled = z.object({ titledProp: z.string().optional() });
    export const HttpErrorCode = z.number().int();
    export const Error = z.object({ httpErrorCode: HttpErrorCode, message: z.string(), schemaTitled: SchemaTitled });

    export module Types {
        export type FluffLevel = z.infer<typeof Schemas.FluffLevel>;
        export type SchemasToy = z.infer<typeof Schemas.SchemasToy>;
        export type FluffyTeddy = z.infer<typeof Schemas.FluffyTeddy>;
        export type Ball = z.infer<typeof Schemas.Ball>;
        export type PetToy = z.infer<typeof Schemas.PetToy>;
        export type SchemaUntitled = z.infer<typeof Schemas.SchemaUntitled>;
        export type Color = z.infer<typeof Schemas.Color>;
        export type TargetGroup = z.infer<typeof Schemas.TargetGroup>;
        export type ComponentsSchemasToy = z.infer<typeof Schemas.ComponentsSchemasToy>;
        export type Pet = z.infer<typeof Schemas.Pet>;
        export type Pets = z.infer<typeof Schemas.Pets>;
        export type SchemaTitled = z.infer<typeof Schemas.SchemaTitled>;
        export type HttpErrorCode = z.infer<typeof Schemas.HttpErrorCode>;
        export type Error = z.infer<typeof Schemas.Error>;
    }

}
"
`;

exports[`generateZod generates test/specs/pets-simple/pets-api.yml: /pets-simple/pets-api 1`] = `
"import { z } from 'zod'
import * as zc from './common.js'

export module Schemas {
    export const PetBase = z.object({ id: z.number().int(), type: z.string() });
    export const Dog = PetBase.merge(z.object({ bark: z.string(), type: z.literal('DOG') }));
    export const Cat = PetBase.merge(z.object({ color: z.string(), type: z.literal('CAT') }));
    export const Pet = zc.ZodUnionMatch.matcher("type", { 'CAT': Cat, 'DOG': Dog, onDefault: z.object({ type: z.string().brand("UNKNOWN") }) }).passthrough();
    export const Pets = z.array(Pet).max(100);

    export module Types {
        export type PetBase = z.infer<typeof Schemas.PetBase>;
        export type Dog = z.infer<typeof Schemas.Dog>;
        export type Cat = z.infer<typeof Schemas.Cat>;
        export type Pet = z.infer<typeof Schemas.Pet>;
        export type Pets = z.infer<typeof Schemas.Pets>;
    }

}
"
`;
