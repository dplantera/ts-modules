// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`post process generated code ts types: post-process-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\tmp\\api.yml 1`] = `
"openapi: 3.0.3
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/PathPetId'
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          $ref: '#/components/responses/Default'
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          $ref: '#/components/responses/Default'
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/PathPetId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          $ref: '#/components/responses/Default'
components:
  parameters:
    PathPetId:
      name: petId
      in: path
      required: true
      description: The id of the pet to retrieve
      schema:
        type: string
  schemas:
    HttpErrorCode:
      type: integer
      format: int32
    schema-titled:
      title: Titled Schema
      properties:
        titledProp:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: '#/components/schemas/HttpErrorCode'
        message:
          type: string
        titledSchema:
          $ref: '#/components/schemas/schema-titled'
    FluffLevel:
      type: string
      enum:
        - A
        - B
        - C
    Toy:
      required:
        - id
        - price
        - kind
      title: Toy
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        targetGroup:
          type: string
          x-extensible-enum:
            - PETS
            - CHILDREN
          default: CHILDREN
    schemas-Toy:
      allOf:
        - $ref: '#/components/schemas/Toy'
      title: Toy
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
        someEnum:
          type: string
          enum:
            - FOO
            - BAR
          title: FooBar
    schema-sub:
      required:
        - string
      properties:
        subId:
          type: string
    schema-untitled:
      properties:
        untitledProp:
          type: string
    Color:
      allOf:
        - $ref: '#/components/schemas/schema-untitled'
      type: object
      properties:
        colorId:
          type: string
        untitled:
          $ref: '#/components/schemas/schema-untitled'
    targetGroup:
      type: string
      x-extensible-enum:
        - PETS
        - CHILDREN
      default: CHILDREN
    Ball:
      allOf:
        - $ref: '#/components/schemas/Toy'
        - title: Ball
    Teddy:
      allOf:
        - $ref: '#/components/schemas/Toy'
        - title: Teddy
    Fluffy:
      properties:
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
    FluffyTeddy:
      allOf:
        - $ref: '#/components/schemas/Teddy'
        - $ref: '#/components/schemas/Fluffy'
    PetToy:
      oneOf:
        - $ref: '#/components/schemas/Ball'
        - $ref: '#/components/schemas/FluffyTeddy'
      discriminator:
        propertyName: kind
        mapping:
          BALL: '#/components/schemas/Ball'
          TEDDY: '#/components/schemas/FluffyTeddy'
    components-schemas-Toy:
      allOf:
        - $ref: '#/components/schemas/schemas-Toy'
        - $ref: '#/components/schemas/schema-sub'
        - title: Toy
          properties:
            name:
              type: string
            color:
              $ref: '#/components/schemas/Color'
            targetGroup:
              $ref: '#/components/schemas/targetGroup'
            relates:
              $ref: '#/components/schemas/PetToy'
    Pet:
      type: object
      required:
        - id
        - name
      example:
        foo: ''
        bar: 1234
        foobar: true
      properties:
        id:
          type: integer
          format: int64
        toy:
          $ref: '#/components/schemas/components-schemas-Toy'
        leastFavToy:
          $ref: '#/components/schemas/schemas-Toy'
        favFluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        tag:
          type: string
          example:
            description: default string example
            value: some string
        name:
          type: string
          example:
            description: default string example
            value: some string
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
  responses:
    Default:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
"
`;

exports[`post process generated code ts types: post-process-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\tmp\\bundled-api.yml 1`] = `
"openapi: 3.0.3
info:
  version: 1.0.1
  title: some title
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
  /pets/{petId}:
    get:
      summary: Get a Pet
      operationId: getPet
      parameters:
        - name: petId
          in: path
          required: true
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
components:
  schemas:
    PetBase:
      title: PetBase
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
      discriminator:
        propertyName: type
    Dog:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            bark:
              type: string
          required:
            - bark
    CatBase:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - title: CatBase
          properties:
            color:
              type: string
            catType:
              type: string
              enum:
                - SEAM
                - SHORT
              title: CatType
          required:
            - color
          discriminator:
            propertyName: catType
    Seam:
      allOf:
        - $ref: '#/components/schemas/CatBase'
        - title: Seam
          properties:
            catType:
              type: string
              default: SEAM
            angryLevel:
              type: string
    ShortHair:
      allOf:
        - $ref: '#/components/schemas/CatBase'
        - title: ShortHair
          properties:
            catType:
              type: string
              default: SHORT
            angryLevel:
              type: string
    Cat:
      oneOf:
        - $ref: '#/components/schemas/Seam'
        - $ref: '#/components/schemas/ShortHair'
      discriminator:
        propertyName: catType
        mapping:
          SEAM: '#/components/schemas/Seam'
          SHORT: '#/components/schemas/ShortHair'
    Pet:
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
      discriminator:
        propertyName: type
        mapping:
          DOG: '#/components/schemas/Dog'
          CAT: '#/components/schemas/Cat'
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
"
`;

exports[`post process generated code ts types: post-process-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\tmp\\bundled-pets-api.yml 1`] = `
"openapi: 3.0.3
info:
  title: My service
  description: My service
  version: 1.0.0
servers:
  - url: https://
paths:
  /v1/pets:
    get:
      summary: Get pets
      operationId: getPets
      responses:
        '200':
          description: Ok response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
components:
  schemas:
    PetBase:
      type: object
      discriminator:
        propertyName: type
      required:
        - type
      properties:
        type:
          type: string
        name:
          type: string
    DogEnum:
      type: string
      enum:
        - DOG_A
        - DOG_B
    Dog:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            fluffy:
              type: boolean
            breed:
              $ref: '#/components/schemas/DogEnum'
    Cat:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            breed:
              type: string
              enum:
                - CAT_A
                - CAT_B
    Pet:
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
      discriminator:
        propertyName: type
        mapping:
          DOG: '#/components/schemas/Dog'
          CAT: '#/components/schemas/Cat'
"
`;

exports[`post process generated code ts types: post-process-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\tmp\\bundled-petstore-api.yml 1`] = `
"openapi: 3.0.3
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/PathPetId'
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          $ref: '#/components/responses/Default'
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          $ref: '#/components/responses/Default'
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/PathPetId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          $ref: '#/components/responses/Default'
components:
  parameters:
    PathPetId:
      name: petId
      in: path
      required: true
      description: The id of the pet to retrieve
      schema:
        type: string
  schemas:
    HttpErrorCode:
      type: integer
      format: int32
    schema-titled:
      title: Titled Schema
      properties:
        titledProp:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: '#/components/schemas/HttpErrorCode'
        message:
          type: string
        titledSchema:
          $ref: '#/components/schemas/schema-titled'
    FluffLevel:
      type: string
      enum:
        - A
        - B
        - C
    Toy:
      required:
        - id
        - price
        - kind
      title: Toy
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        targetGroup:
          type: string
          x-extensible-enum:
            - PETS
            - CHILDREN
          default: CHILDREN
    schemas-Toy:
      allOf:
        - $ref: '#/components/schemas/Toy'
      title: Toy
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
        someEnum:
          type: string
          enum:
            - FOO
            - BAR
          title: FooBar
    schema-sub:
      required:
        - string
      properties:
        subId:
          type: string
    schema-untitled:
      properties:
        untitledProp:
          type: string
    Color:
      allOf:
        - $ref: '#/components/schemas/schema-untitled'
      type: object
      properties:
        colorId:
          type: string
        untitled:
          $ref: '#/components/schemas/schema-untitled'
    targetGroup:
      type: string
      x-extensible-enum:
        - PETS
        - CHILDREN
      default: CHILDREN
    Ball:
      allOf:
        - $ref: '#/components/schemas/Toy'
        - title: Ball
    Teddy:
      allOf:
        - $ref: '#/components/schemas/Toy'
        - title: Teddy
    Fluffy:
      properties:
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
    FluffyTeddy:
      allOf:
        - $ref: '#/components/schemas/Teddy'
        - $ref: '#/components/schemas/Fluffy'
    PetToy:
      oneOf:
        - $ref: '#/components/schemas/Ball'
        - $ref: '#/components/schemas/FluffyTeddy'
      discriminator:
        propertyName: kind
        mapping:
          BALL: '#/components/schemas/Ball'
          TEDDY: '#/components/schemas/FluffyTeddy'
    components-schemas-Toy:
      allOf:
        - $ref: '#/components/schemas/schemas-Toy'
        - $ref: '#/components/schemas/schema-sub'
        - title: Toy
          properties:
            name:
              type: string
            color:
              $ref: '#/components/schemas/Color'
            targetGroup:
              $ref: '#/components/schemas/targetGroup'
            relates:
              $ref: '#/components/schemas/PetToy'
    Pet:
      type: object
      required:
        - id
        - name
      example:
        foo: ''
        bar: 1234
        foobar: true
      properties:
        id:
          type: integer
          format: int64
        toy:
          $ref: '#/components/schemas/components-schemas-Toy'
        leastFavToy:
          $ref: '#/components/schemas/schemas-Toy'
        favFluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        tag:
          type: string
          example:
            description: default string example
            value: some string
        name:
          type: string
          example:
            description: default string example
            value: some string
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
  responses:
    Default:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
"
`;

exports[`post process generated code ts types: post-process-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\tmp\\complex-api.yml 1`] = `
"openapi: 3.0.3
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/PathPetId'
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          $ref: '#/components/responses/Default'
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          $ref: '#/components/responses/Default'
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/PathPetId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          $ref: '#/components/responses/Default'
components:
  parameters:
    PathPetId:
      name: petId
      in: path
      required: true
      description: The id of the pet to retrieve
      schema:
        type: string
  schemas:
    HttpErrorCode:
      type: integer
      format: int32
    schema-titled:
      title: Titled Schema
      properties:
        titledProp:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: '#/components/schemas/HttpErrorCode'
        message:
          type: string
        titledSchema:
          $ref: '#/components/schemas/schema-titled'
    FluffLevel:
      type: string
      enum:
        - A
        - B
        - C
    Toy:
      required:
        - id
        - price
        - kind
      title: Toy
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        targetGroup:
          type: string
          x-extensible-enum:
            - PETS
            - CHILDREN
          default: CHILDREN
    schemas-Toy:
      allOf:
        - $ref: '#/components/schemas/Toy'
      title: Toy
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
        someEnum:
          type: string
          enum:
            - FOO
            - BAR
          title: FooBar
    schema-sub:
      required:
        - string
      properties:
        subId:
          type: string
    schema-untitled:
      properties:
        untitledProp:
          type: string
    Color:
      allOf:
        - $ref: '#/components/schemas/schema-untitled'
      type: object
      properties:
        colorId:
          type: string
        untitled:
          $ref: '#/components/schemas/schema-untitled'
    targetGroup:
      type: string
      x-extensible-enum:
        - PETS
        - CHILDREN
      default: CHILDREN
    Ball:
      allOf:
        - $ref: '#/components/schemas/Toy'
        - title: Ball
    Teddy:
      allOf:
        - $ref: '#/components/schemas/Toy'
        - title: Teddy
    Fluffy:
      properties:
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
    FluffyTeddy:
      allOf:
        - $ref: '#/components/schemas/Teddy'
        - $ref: '#/components/schemas/Fluffy'
    PetToy:
      oneOf:
        - $ref: '#/components/schemas/Ball'
        - $ref: '#/components/schemas/FluffyTeddy'
      discriminator:
        propertyName: kind
        mapping:
          BALL: '#/components/schemas/Ball'
          TEDDY: '#/components/schemas/FluffyTeddy'
    components-schemas-Toy:
      allOf:
        - $ref: '#/components/schemas/schemas-Toy'
        - $ref: '#/components/schemas/schema-sub'
        - title: Toy
          properties:
            name:
              type: string
            color:
              $ref: '#/components/schemas/Color'
            targetGroup:
              $ref: '#/components/schemas/targetGroup'
            relates:
              $ref: '#/components/schemas/PetToy'
    Pet:
      type: object
      required:
        - id
        - name
      example:
        foo: ''
        bar: 1234
        foobar: true
      properties:
        id:
          type: integer
          format: int64
        toy:
          $ref: '#/components/schemas/components-schemas-Toy'
        leastFavToy:
          $ref: '#/components/schemas/schemas-Toy'
        favFluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        tag:
          type: string
          example:
            description: default string example
            value: some string
        name:
          type: string
          example:
            description: default string example
            value: some string
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
  responses:
    Default:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
"
`;

exports[`post process spec mergeAllOf test/specs/generic/api.yml: test/specs/generic/api.yml 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "discriminator": {
          "mapping": {
            "SEAM": "#/components/schemas/Seam",
            "SHORT": "#/components/schemas/ShortHair",
          },
          "propertyName": "catType",
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Seam",
          },
          {
            "$ref": "#/components/schemas/ShortHair",
          },
        ],
      },
      "CatBase": {
        "allOf": [
          {},
          {
            "discriminator": {
              "propertyName": "catType",
            },
            "properties": {
              "catType": {
                "enum": [
                  "SEAM",
                  "SHORT",
                ],
                "title": "CatType",
                "type": "string",
              },
              "color": {
                "type": "string",
              },
            },
            "required": [
              "color",
            ],
            "title": "CatBase",
          },
        ],
      },
      "Dog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PetBase",
          },
          {
            "properties": {
              "bark": {
                "type": "string",
              },
            },
            "required": [
              "bark",
            ],
          },
        ],
      },
      "Pet": {
        "discriminator": {
          "mapping": {
            "CAT": "#/components/schemas/Cat",
            "DOG": "#/components/schemas/Dog",
          },
          "propertyName": "type",
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Cat",
          },
          {
            "$ref": "#/components/schemas/Dog",
          },
        ],
      },
      "PetBase": {
        "discriminator": {
          "propertyName": "type",
        },
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
        ],
        "title": "PetBase",
        "type": "object",
      },
      "Pets": {
        "items": {
          "$ref": "#/components/schemas/Pet",
        },
        "maxItems": 100,
        "type": "array",
      },
      "Seam": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PetBase",
          },
          {
            "discriminator": {
              "propertyName": "catType",
            },
            "properties": {
              "angryLevel": {
                "type": "string",
              },
              "catType": {
                "default": "SEAM",
                "enum": [
                  "SEAM",
                  "SHORT",
                ],
                "title": "CatType",
                "type": "string",
              },
              "color": {
                "type": "string",
              },
            },
            "required": [
              "color",
            ],
            "title": "Seam",
          },
        ],
      },
      "ShortHair": {
        "discriminator": {
          "propertyName": "catType",
        },
        "properties": {
          "angryLevel": {
            "type": "string",
          },
          "catType": {
            "default": "SHORT",
            "enum": [
              "SEAM",
              "SHORT",
            ],
            "title": "CatType",
            "type": "string",
          },
          "color": {
            "type": "string",
          },
        },
        "required": [
          "color",
        ],
        "title": "ShortHair",
      },
    },
  },
  "info": {
    "title": "some title",
    "version": "1.0.1",
  },
  "openapi": "3.0.3",
  "paths": {
    "/pets": {
      "get": {
        "operationId": "listPets",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pets",
                },
              },
            },
            "description": "A paged array of pets",
          },
        },
        "summary": "List all pets",
      },
    },
    "/pets/{petId}": {
      "get": {
        "operationId": "getPet",
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "required": true,
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "A paged array of pets",
          },
        },
        "summary": "Get a Pet",
      },
    },
  },
}
`;

exports[`post process spec mergeAllOf test/specs/pets-modular/pets-api.yml: test/specs/pets-modular/pets-api.yml 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PetBase",
          },
          {
            "properties": {
              "breed": {
                "enum": [
                  "CAT_A",
                  "CAT_B",
                ],
                "type": "string",
              },
            },
          },
        ],
      },
      "Dog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PetBase",
          },
          {
            "properties": {
              "breed": {
                "$ref": "#/components/schemas/DogEnum",
              },
              "fluffy": {
                "type": "boolean",
              },
            },
          },
        ],
      },
      "DogEnum": {
        "enum": [
          "DOG_A",
          "DOG_B",
        ],
        "type": "string",
      },
      "Pet": {
        "discriminator": {
          "mapping": {
            "CAT": "#/components/schemas/Cat",
            "DOG": "#/components/schemas/Dog",
          },
          "propertyName": "type",
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Cat",
          },
          {
            "$ref": "#/components/schemas/Dog",
          },
        ],
      },
      "PetBase": {
        "discriminator": {
          "propertyName": "type",
        },
        "properties": {
          "name": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "type",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "description": "My service",
    "title": "My service",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/v1/pets": {
      "get": {
        "operationId": "getPets",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "Ok response",
          },
        },
        "summary": "Get pets",
      },
    },
  },
  "servers": [
    {
      "url": "https://",
    },
  ],
}
`;

exports[`post process spec mergeAllOf test/specs/pets-modular-complex/petstore-api.yml: test/specs/pets-modular-complex/petstore-api.yml 1`] = `
{
  "components": {
    "parameters": {
      "PathPetId": {
        "description": "The id of the pet to retrieve",
        "in": "path",
        "name": "petId",
        "required": true,
        "schema": {
          "type": "string",
        },
      },
    },
    "responses": {
      "Default": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error",
            },
          },
        },
        "description": "unexpected error",
      },
    },
    "schemas": {
      "Ball": {
        "properties": {
          "fluffLevel": {
            "$ref": "#/components/schemas/FluffLevel",
          },
          "id": {
            "type": "string",
          },
          "kind": {
            "type": "string",
          },
          "price": {
            "type": "string",
          },
          "targetGroup": {
            "default": "CHILDREN",
            "type": "string",
            "x-extensible-enum": [
              "PETS",
              "CHILDREN",
            ],
          },
        },
        "required": [
          "id",
          "price",
          "kind",
        ],
        "title": "Ball",
      },
      "Color": {
        "properties": {
          "colorId": {
            "type": "string",
          },
          "untitled": {
            "$ref": "#/components/schemas/schema-untitled",
          },
          "untitledProp": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Error": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/HttpErrorCode",
          },
          "message": {
            "type": "string",
          },
          "titledSchema": {
            "$ref": "#/components/schemas/schema-titled",
          },
        },
        "required": [
          "code",
          "message",
        ],
        "type": "object",
      },
      "FluffLevel": {
        "enum": [
          "A",
          "B",
          "C",
        ],
        "type": "string",
      },
      "Fluffy": {
        "properties": {
          "fluffLevel": {
            "$ref": "#/components/schemas/FluffLevel",
          },
        },
      },
      "FluffyTeddy": {
        "properties": {
          "fluffLevel": {
            "$ref": "#/components/schemas/FluffLevel",
          },
          "id": {
            "type": "string",
          },
          "kind": {
            "type": "string",
          },
          "price": {
            "type": "string",
          },
          "targetGroup": {
            "default": "CHILDREN",
            "type": "string",
            "x-extensible-enum": [
              "PETS",
              "CHILDREN",
            ],
          },
        },
        "required": [
          "id",
          "price",
          "kind",
        ],
        "title": "Teddy",
      },
      "HttpErrorCode": {
        "format": "int32",
        "type": "integer",
      },
      "Pet": {
        "example": {
          "bar": 1234,
          "foo": "",
          "foobar": true,
        },
        "properties": {
          "favFluffLevel": {
            "$ref": "#/components/schemas/FluffLevel",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "leastFavToy": {
            "$ref": "#/components/schemas/schemas-Toy",
          },
          "name": {
            "example": {
              "description": "default string example",
              "value": "some string",
            },
            "type": "string",
          },
          "tag": {
            "example": {
              "description": "default string example",
              "value": "some string",
            },
            "type": "string",
          },
          "toy": {
            "$ref": "#/components/schemas/components-schemas-Toy",
          },
        },
        "required": [
          "id",
          "name",
        ],
        "type": "object",
      },
      "PetToy": {
        "discriminator": {
          "mapping": {
            "BALL": "#/components/schemas/Ball",
            "TEDDY": "#/components/schemas/FluffyTeddy",
          },
          "propertyName": "kind",
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Ball",
          },
          {
            "$ref": "#/components/schemas/FluffyTeddy",
          },
        ],
      },
      "Pets": {
        "items": {
          "$ref": "#/components/schemas/Pet",
        },
        "maxItems": 100,
        "type": "array",
      },
      "Teddy": {
        "properties": {
          "fluffLevel": {
            "$ref": "#/components/schemas/FluffLevel",
          },
          "id": {
            "type": "string",
          },
          "kind": {
            "type": "string",
          },
          "price": {
            "type": "string",
          },
          "targetGroup": {
            "default": "CHILDREN",
            "type": "string",
            "x-extensible-enum": [
              "PETS",
              "CHILDREN",
            ],
          },
        },
        "required": [
          "id",
          "price",
          "kind",
        ],
        "title": "Teddy",
      },
      "Toy": {
        "properties": {
          "fluffLevel": {
            "$ref": "#/components/schemas/FluffLevel",
          },
          "id": {
            "type": "string",
          },
          "kind": {
            "type": "string",
          },
          "price": {
            "type": "string",
          },
          "targetGroup": {
            "default": "CHILDREN",
            "type": "string",
            "x-extensible-enum": [
              "PETS",
              "CHILDREN",
            ],
          },
        },
        "required": [
          "id",
          "price",
          "kind",
        ],
        "title": "Toy",
      },
      "components-schemas-Toy": {
        "properties": {
          "color": {
            "$ref": "#/components/schemas/Color",
          },
          "fluffLevel": {
            "$ref": "#/components/schemas/FluffLevel",
          },
          "id": {
            "type": "string",
          },
          "kind": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "price": {
            "type": "string",
          },
          "relates": {
            "$ref": "#/components/schemas/PetToy",
          },
          "someEnum": {
            "enum": [
              "FOO",
              "BAR",
            ],
            "title": "FooBar",
            "type": "string",
          },
          "subId": {
            "type": "string",
          },
          "targetGroup": {
            "$ref": "#/components/schemas/targetGroup",
            "default": "CHILDREN",
            "type": "string",
            "x-extensible-enum": [
              "PETS",
              "CHILDREN",
            ],
          },
        },
        "required": [
          "id",
          "kind",
          "price",
          "string",
        ],
        "title": "Toy",
      },
      "schema-sub": {
        "properties": {
          "subId": {
            "type": "string",
          },
        },
        "required": [
          "string",
        ],
      },
      "schema-titled": {
        "properties": {
          "titledProp": {
            "type": "string",
          },
        },
        "title": "Titled Schema",
      },
      "schema-untitled": {
        "properties": {
          "untitledProp": {
            "type": "string",
          },
        },
      },
      "schemas-Toy": {
        "properties": {
          "fluffLevel": {
            "$ref": "#/components/schemas/FluffLevel",
          },
          "id": {
            "type": "string",
          },
          "kind": {
            "type": "string",
          },
          "price": {
            "type": "string",
          },
          "someEnum": {
            "enum": [
              "FOO",
              "BAR",
            ],
            "title": "FooBar",
            "type": "string",
          },
          "targetGroup": {
            "default": "CHILDREN",
            "type": "string",
            "x-extensible-enum": [
              "PETS",
              "CHILDREN",
            ],
          },
        },
        "required": [
          "id",
          "price",
          "kind",
        ],
        "title": "Toy",
      },
      "targetGroup": {
        "default": "CHILDREN",
        "type": "string",
        "x-extensible-enum": [
          "PETS",
          "CHILDREN",
        ],
      },
    },
  },
  "info": {
    "license": {
      "name": "MIT",
    },
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/pets": {
      "get": {
        "operationId": "listPets",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPetId",
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pets",
                },
              },
            },
            "description": "A paged array of pets",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string",
                },
              },
            },
          },
          "default": {
            "$ref": "#/components/responses/Default",
          },
        },
        "summary": "List all pets",
        "tags": [
          "pets",
        ],
      },
      "post": {
        "operationId": "createPets",
        "responses": {
          "201": {
            "description": "Null response",
          },
          "default": {
            "$ref": "#/components/responses/Default",
          },
        },
        "summary": "Create a pet",
        "tags": [
          "pets",
        ],
      },
    },
    "/pets/{petId}": {
      "get": {
        "operationId": "showPetById",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPetId",
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "Expected response to a valid request",
          },
          "default": {
            "$ref": "#/components/responses/Default",
          },
        },
        "summary": "Info for a specific pet",
        "tags": [
          "pets",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v1",
    },
  ],
}
`;

exports[`post process spec mergeAllOf test/specs/pets-simple/pets-api.yml: test/specs/pets-simple/pets-api.yml 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PetBase",
          },
          {
            "properties": {
              "color": {
                "type": "string",
              },
            },
            "required": [
              "color",
            ],
          },
        ],
      },
      "Dog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PetBase",
          },
          {
            "properties": {
              "bark": {
                "type": "string",
              },
            },
            "required": [
              "bark",
            ],
          },
        ],
      },
      "Pet": {
        "discriminator": {
          "mapping": {
            "CAT": "#/components/schemas/Dog",
            "DOG": "#/components/schemas/schemas",
          },
          "propertyName": "type",
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Cat",
          },
          {
            "$ref": "#/components/schemas/Dog",
          },
        ],
      },
      "PetBase": {
        "discriminator": {
          "propertyName": "type",
        },
        "example": {
          "some": "props",
        },
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
        ],
        "type": "object",
      },
      "Pets": {
        "items": {
          "$ref": "#/components/schemas/Pet",
        },
        "maxItems": 100,
        "type": "array",
      },
      "schemas": {
        "Cat": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PetBase",
            },
            {
              "properties": {
                "color": {
                  "type": "string",
                },
              },
              "required": [
                "color",
              ],
            },
          ],
        },
        "Dog": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PetBase",
            },
            {
              "properties": {
                "bark": {
                  "type": "string",
                },
              },
              "required": [
                "bark",
              ],
            },
          ],
        },
        "Pet": {
          "discriminator": {
            "mapping": {
              "CAT": "#/components/schemas/Dog",
              "DOG": "#/components/schemas/schemas",
            },
            "propertyName": "type",
          },
          "oneOf": [
            {
              "$ref": "#/components/schemas/Cat",
            },
            {
              "$ref": "#/components/schemas/Dog",
            },
          ],
        },
        "PetBase": {
          "discriminator": {
            "propertyName": "type",
          },
          "example": {
            "some": "props",
          },
          "properties": {
            "id": {
              "format": "int64",
              "type": "integer",
            },
            "type": {
              "type": "string",
            },
          },
          "required": [
            "id",
            "name",
          ],
          "type": "object",
        },
        "Pets": {
          "items": {
            "$ref": "#/components/schemas/Pet",
          },
          "maxItems": 100,
          "type": "array",
        },
      },
    },
  },
  "info": {
    "title": "some title",
    "version": "1.0.1",
  },
  "openapi": "3.0.3",
  "paths": {
    "/pets": {
      "get": {
        "operationId": "listPets",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pets",
                },
              },
            },
            "description": "A paged array of pets",
          },
        },
        "summary": "List all pets",
      },
    },
  },
}
`;
