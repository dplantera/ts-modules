// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
* @type Cat
* @export
* @discriminatedUnion Cat
* @discriminatorProperty catType
* @discriminatorValues SEAM | SHORT
* @subTypes Seam | ShortHair
*/
export type Cat = { catType: 'SEAM' } & Seam | { catType: 'SHORT' } & ShortHair | { catType: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface CatBase
 */
export interface CatBase {
    /**
     * 
     * @type {string}
     * @memberof CatBase
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof CatBase
     * @discriminator catType
     */
    catType: string;
}
    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    bark: string;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}
    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues CAT | DOG
* @subTypes Cat | Dog
*/
export type Pet = { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {number}
     * @memberof PetBase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
}
    
        /**
 * 
 * @export
 * @interface Seam
 */
export interface Seam extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     * @discriminator catType
     */
    catType: 'SEAM';
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    type: 'CAT';
}
    
        /**
 * 
 * @export
 * @interface ShortHair
 */
export interface ShortHair {
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     * @discriminator catType
     */
    catType: 'SHORT';
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    type: 'CAT';
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('getPet', 'petId', petId)
            const localVarPath = \`/pets/{petId}\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPet(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPet(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet(petId: string, options?: any): AxiosPromise<Pet> {
            return localVarFp.getPet(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get a Pet
     * @param {string} petId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPet(petId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPet(petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } 
        else {
            Object.keys(parameter).forEach(currentKey => 
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } 
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } 
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & {readonly [tag]: "UNKNOWN";};"
`;

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const PetBase = z
  .object({ id: z.number().int(), type: z.string() })
  .passthrough();
const Seam = PetBase.merge(
  z
    .object({
      color: z.string(),
      catType: z.string().default("SEAM"),
      angryLevel: z.string().optional(),
      type: z.string(),
    })
    .passthrough()
);
const ShortHair = z
  .object({
    color: z.string(),
    catType: z.string().default("SHORT"),
    angryLevel: z.string().optional(),
    type: z.string(),
  })
  .passthrough();
const Cat = z.discriminatedUnion("catType", [Seam, ShortHair]);
const Dog = PetBase.merge(
  z.object({ bark: z.string(), type: z.string() }).passthrough()
);
const Pet = z.discriminatedUnion("type", [Cat, Dog]);
const Pets = z.array(Pet);

export const schemas = {
  PetBase,
  Seam,
  ShortHair,
  Cat,
  Dog,
  Pet,
  Pets,
};
"
`;

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\generic\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
* @type Cat
* @export
* @discriminatedUnion Cat
* @discriminatorProperty catType
* @discriminatorValues SEAM | SHORT
* @subTypes Seam | ShortHair
*/
export type Cat = { catType: 'SEAM' } & Seam | { catType: 'SHORT' } & ShortHair | { catType: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface CatBase
 */
export interface CatBase {
    /**
     * 
     * @type {string}
     * @memberof CatBase
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof CatBase
     * @discriminator catType
     */
    catType: string;
}
    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    bark: string;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}
    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues CAT | DOG
* @subTypes Cat | Dog
*/
export type Pet = { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {number}
     * @memberof PetBase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
}
    
        /**
 * 
 * @export
 * @interface Seam
 */
export interface Seam extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     * @discriminator catType
     */
    catType: 'SEAM';
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    type: 'CAT';
}
    
        /**
 * 
 * @export
 * @interface ShortHair
 */
export interface ShortHair {
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     * @discriminator catType
     */
    catType: 'SHORT';
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    type: 'CAT';
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('getPet', 'petId', petId)
            const localVarPath = \`/pets/{petId}\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPet(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPet(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet(petId: string, options?: any): AxiosPromise<Pet> {
            return localVarFp.getPet(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get a Pet
     * @param {string} petId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPet(petId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPet(petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\generic\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\generic\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } 
        else {
            Object.keys(parameter).forEach(currentKey => 
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } 
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } 
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & {readonly [tag]: "UNKNOWN";};"
`;

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\generic\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\generic\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\generic\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const PetBase = z
  .object({ id: z.number().int(), type: z.string() })
  .passthrough();
const Seam = PetBase.merge(
  z
    .object({
      color: z.string(),
      catType: z.string().default("SEAM"),
      angryLevel: z.string().optional(),
      type: z.string(),
    })
    .passthrough()
);
const ShortHair = z
  .object({
    color: z.string(),
    catType: z.string().default("SHORT"),
    angryLevel: z.string().optional(),
    type: z.string(),
  })
  .passthrough();
const Cat = z.discriminatedUnion("catType", [Seam, ShortHair]);
const Dog = PetBase.merge(
  z.object({ bark: z.string(), type: z.string() }).passthrough()
);
const Pet = z.discriminatedUnion("type", [Cat, Dog]);
const Pets = z.array(Pet);

export const schemas = {
  PetBase,
  Seam,
  ShortHair,
  Cat,
  Dog,
  Pet,
  Pets,
};
"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
 * 
 * @export
 * @interface Cat
 */
export interface Cat extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    breed?: CatBreedEnum;
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    type: 'CAT';
}


export const CatBreedEnum = {
    A: 'CAT_A',
    B: 'CAT_B'
} as const;

export type CatBreedEnum = typeof CatBreedEnum[keyof typeof CatBreedEnum] | UNKNOWN_ENUM_VARIANT  ;

    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {boolean}
     * @memberof Dog
     */
    fluffy?: boolean;
    /**
     * 
     * @type {DogEnum}
     * @memberof Dog
     */
    breed?: DogEnum;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}


    /**
 * 
 * @export
 * @enum {string}
 */

export const DogEnum = {
    A: 'DOG_A',
    B: 'DOG_B'
} as const;

export type DogEnum = typeof DogEnum[keyof typeof DogEnum]  | UNKNOWN_ENUM_VARIANT;


    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues CAT | DOG
* @subTypes Cat | Dog
*/
export type Pet = { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     */
    name?: string;
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/v1/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPets(options?: any): AxiosPromise<Pet> {
            return localVarFp.getPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://https:/".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } 
        else {
            Object.keys(parameter).forEach(currentKey => 
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } 
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } 
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & {readonly [tag]: "UNKNOWN";};"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const PetBase = z
  .object({ type: z.string(), name: z.string().optional() })
  .passthrough();
const Cat = PetBase.merge(
  z
    .object({ breed: z.enum(["CAT_A", "CAT_B"]).or(UNKNOWN_SCHEMA).optional(), type: z.string() })
    .passthrough()
);
const DogEnum = z.enum(["DOG_A", "DOG_B"]).or(UNKNOWN_SCHEMA);
const Dog = PetBase.merge(
  z
    .object({
      fluffy: z.boolean().optional(),
      breed: DogEnum.optional(),
      type: z.string(),
    })
    .passthrough()
);
const Pet = z.discriminatedUnion("type", [Cat, Dog]);
export const schemas = {
  PetBase,
  Cat,
  DogEnum,
  Dog,
  Pet,
};
"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
 * 
 * @export
 * @interface Cat
 */
export interface Cat extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    breed?: CatBreedEnum;
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    type: 'CAT';
}


export const CatBreedEnum = {
    A: 'CAT_A',
    B: 'CAT_B'
} as const;

export type CatBreedEnum = typeof CatBreedEnum[keyof typeof CatBreedEnum] | UNKNOWN_ENUM_VARIANT  ;

    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {boolean}
     * @memberof Dog
     */
    fluffy?: boolean;
    /**
     * 
     * @type {DogEnum}
     * @memberof Dog
     */
    breed?: DogEnum;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}


    /**
 * 
 * @export
 * @enum {string}
 */

export const DogEnum = {
    A: 'DOG_A',
    B: 'DOG_B'
} as const;

export type DogEnum = typeof DogEnum[keyof typeof DogEnum]  | UNKNOWN_ENUM_VARIANT;


    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues CAT | DOG
* @subTypes Cat | Dog
*/
export type Pet = { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     */
    name?: string;
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/v1/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPets(options?: any): AxiosPromise<Pet> {
            return localVarFp.getPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://https:/".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } 
        else {
            Object.keys(parameter).forEach(currentKey => 
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } 
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } 
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & {readonly [tag]: "UNKNOWN";};"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const PetBase = z
  .object({ type: z.string(), name: z.string().optional() })
  .passthrough();
const Cat = PetBase.merge(
  z
    .object({ breed: z.enum(["CAT_A", "CAT_B"]).or(UNKNOWN_SCHEMA).optional(), type: z.string() })
    .passthrough()
);
const DogEnum = z.enum(["DOG_A", "DOG_B"]).or(UNKNOWN_SCHEMA);
const Dog = PetBase.merge(
  z
    .object({
      fluffy: z.boolean().optional(),
      breed: DogEnum.optional(),
      type: z.string(),
    })
    .passthrough()
);
const Pet = z.discriminatedUnion("type", [Cat, Dog]);
export const schemas = {
  PetBase,
  Cat,
  DogEnum,
  Dog,
  Pet,
};
"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
 * 
 * @export
 * @interface Ball
 */
export interface Ball {
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    kind: 'BALL';
    /**
     * 
     * @type {FluffLevel}
     * @memberof Ball
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    targetGroup?: string;
}


    
        /**
 * 
 * @export
 * @interface Color
 */
export interface Color {
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    untitledProp?: string;
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    colorId?: string;
    /**
     * 
     * @type {SchemaUntitled}
     * @memberof Color
     */
    untitled?: SchemaUntitled;
}
    
        /**
 * 
 * @export
 * @interface ComponentsSchemasToy
 */
export interface ComponentsSchemasToy {
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    kind: string;
    /**
     * 
     * @type {FluffLevel}
     * @memberof ComponentsSchemasToy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    targetGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    someEnum?: ComponentsSchemasToySomeEnumEnum;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    subId?: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    name?: string;
    /**
     * 
     * @type {Color}
     * @memberof ComponentsSchemasToy
     */
    color?: Color;
    /**
     * 
     * @type {PetToy}
     * @memberof ComponentsSchemasToy
     */
    relates?: PetToy;
}


export const ComponentsSchemasToySomeEnumEnum = {
    Foo: 'FOO',
    Bar: 'BAR'
} as const;

export type ComponentsSchemasToySomeEnumEnum = typeof ComponentsSchemasToySomeEnumEnum[keyof typeof ComponentsSchemasToySomeEnumEnum] | UNKNOWN_ENUM_VARIANT  ;

    /**
 * 
 * @export
 * @enum {string}
 */

export const FluffLevel = {
    A: 'A',
    B: 'B',
    C: 'C'
} as const;

export type FluffLevel = typeof FluffLevel[keyof typeof FluffLevel]  | UNKNOWN_ENUM_VARIANT;


    
        /**
 * 
 * @export
 * @interface FluffyTeddy
 */
export interface FluffyTeddy {
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    kind: 'TEDDY';
    /**
     * 
     * @type {FluffLevel}
     * @memberof FluffyTeddy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    targetGroup?: string;
}


    
        /**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * 
     * @type {SchemaTitled}
     * @memberof ModelError
     */
    titledSchema?: SchemaTitled;
}
    
        /**
 * 
 * @export
 * @interface Pet
 */
export interface Pet {
    /**
     * 
     * @type {number}
     * @memberof Pet
     */
    id: number;
    /**
     * 
     * @type {ComponentsSchemasToy}
     * @memberof Pet
     */
    toy?: ComponentsSchemasToy;
    /**
     * 
     * @type {SchemasToy}
     * @memberof Pet
     */
    leastFavToy?: SchemasToy;
    /**
     * 
     * @type {FluffLevel}
     * @memberof Pet
     */
    favFluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    tag?: string;
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    name: string;
}


    
        /**
* @type PetToy
* @export
* @discriminatedUnion PetToy
* @discriminatorProperty kind
* @discriminatorValues BALL | TEDDY
* @subTypes Ball | FluffyTeddy
*/
export type PetToy = { kind: 'BALL' } & Ball | { kind: 'TEDDY' } & FluffyTeddy | { kind: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface SchemaTitled
 */
export interface SchemaTitled {
    /**
     * 
     * @type {string}
     * @memberof SchemaTitled
     */
    titledProp?: string;
}
    
        /**
 * 
 * @export
 * @interface SchemaUntitled
 */
export interface SchemaUntitled {
    /**
     * 
     * @type {string}
     * @memberof SchemaUntitled
     */
    untitledProp?: string;
}
    
        /**
 * 
 * @export
 * @interface SchemasToy
 */
export interface SchemasToy {
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    kind: string;
    /**
     * 
     * @type {FluffLevel}
     * @memberof SchemasToy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    targetGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    someEnum?: SchemasToySomeEnumEnum;
}


export const SchemasToySomeEnumEnum = {
    Foo: 'FOO',
    Bar: 'BAR'
} as const;

export type SchemasToySomeEnumEnum = typeof SchemasToySomeEnumEnum[keyof typeof SchemasToySomeEnumEnum] | UNKNOWN_ENUM_VARIANT  ;




/**
 * PetsApi - axios parameter creator
 * @export
 */
export const PetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('listPets', 'petId', petId)
            const localVarPath = \`/pets\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('showPetById', 'petId', petId)
            const localVarPath = \`/pets/{petId}\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PetsApi - functional programming interface
 * @export
 */
export const PetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.createPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showPetById(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showPetById(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.showPetById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PetsApi - factory interface
 * @export
 */
export const PetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PetsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets(options?: any): AxiosPromise<void> {
            return localVarFp.createPets(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(petId: string, options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById(petId: string, options?: any): AxiosPromise<Pet> {
            return localVarFp.showPetById(petId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PetsApi - object-oriented interface
 * @export
 * @class PetsApi
 * @extends {BaseAPI}
 */
export class PetsApi extends BaseAPI {
    /**
     * 
     * @summary Create a pet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public createPets(options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).createPets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {string} petId The id of the pet to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public listPets(petId: string, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).listPets(petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Info for a specific pet
     * @param {string} petId The id of the pet to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public showPetById(petId: string, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).showPetById(petId, options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://petstore.swagger.io/v1".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } 
        else {
            Object.keys(parameter).forEach(currentKey => 
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } 
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } 
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & {readonly [tag]: "UNKNOWN";};"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const FluffLevel = z.enum(["A", "B", "C"]).or(UNKNOWN_SCHEMA);
const targetGroup = z.string();
const schema_untitled = z
  .object({ untitledProp: z.string() })
  .partial()
  .passthrough();
const Color = z
  .object({
    untitledProp: z.string(),
    colorId: z.string(),
    untitled: schema_untitled,
  })
  .partial()
  .passthrough();
const Ball = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: z.string().optional().default("CHILDREN"),
  })
  .passthrough();
const FluffyTeddy = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: z.string().optional().default("CHILDREN"),
  })
  .passthrough();
const PetToy = z.discriminatedUnion("kind", [Ball, FluffyTeddy]);
const components_schemas_Toy = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: targetGroup.optional().default("CHILDREN"),
    someEnum: z.enum(["FOO", "BAR"]).or(UNKNOWN_SCHEMA).optional(),
    subId: z.string().optional(),
    name: z.string().optional(),
    color: Color.optional(),
    relates: PetToy.optional(),
  })
  .passthrough();
const schemas_Toy = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: z.string().optional().default("CHILDREN"),
    someEnum: z.enum(["FOO", "BAR"]).or(UNKNOWN_SCHEMA).optional(),
  })
  .passthrough();
const Pet = z
  .object({
    id: z.number().int(),
    toy: components_schemas_Toy.optional(),
    leastFavToy: schemas_Toy.optional(),
    favFluffLevel: FluffLevel.optional(),
    tag: z.string().optional(),
    name: z.string(),
  })
  .passthrough();
const Pets = z.array(Pet);
const HttpErrorCode = z.number();
const schema_titled = z
  .object({ titledProp: z.string() })
  .partial()
  .passthrough();
const Error = z
  .object({
    code: HttpErrorCode.int(),
    message: z.string(),
    titledSchema: schema_titled.optional(),
  })
  .passthrough();

export const schemas = {
  FluffLevel,
  targetGroup,
  schema_untitled,
  Color,
  Ball,
  FluffyTeddy,
  PetToy,
  components_schemas_Toy,
  schemas_Toy,
  Pet,
  Pets,
  HttpErrorCode,
  schema_titled,
  Error,
};
"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular-complex\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
 * 
 * @export
 * @interface Ball
 */
export interface Ball {
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    kind: 'BALL';
    /**
     * 
     * @type {FluffLevel}
     * @memberof Ball
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    targetGroup?: string;
}


    
        /**
 * 
 * @export
 * @interface Color
 */
export interface Color {
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    untitledProp?: string;
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    colorId?: string;
    /**
     * 
     * @type {SchemaUntitled}
     * @memberof Color
     */
    untitled?: SchemaUntitled;
}
    
        /**
 * 
 * @export
 * @interface ComponentsSchemasToy
 */
export interface ComponentsSchemasToy {
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    kind: string;
    /**
     * 
     * @type {FluffLevel}
     * @memberof ComponentsSchemasToy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    targetGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    someEnum?: ComponentsSchemasToySomeEnumEnum;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    subId?: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    name?: string;
    /**
     * 
     * @type {Color}
     * @memberof ComponentsSchemasToy
     */
    color?: Color;
    /**
     * 
     * @type {PetToy}
     * @memberof ComponentsSchemasToy
     */
    relates?: PetToy;
}


export const ComponentsSchemasToySomeEnumEnum = {
    Foo: 'FOO',
    Bar: 'BAR'
} as const;

export type ComponentsSchemasToySomeEnumEnum = typeof ComponentsSchemasToySomeEnumEnum[keyof typeof ComponentsSchemasToySomeEnumEnum] | UNKNOWN_ENUM_VARIANT  ;

    /**
 * 
 * @export
 * @enum {string}
 */

export const FluffLevel = {
    A: 'A',
    B: 'B',
    C: 'C'
} as const;

export type FluffLevel = typeof FluffLevel[keyof typeof FluffLevel]  | UNKNOWN_ENUM_VARIANT;


    
        /**
 * 
 * @export
 * @interface FluffyTeddy
 */
export interface FluffyTeddy {
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    kind: 'TEDDY';
    /**
     * 
     * @type {FluffLevel}
     * @memberof FluffyTeddy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    targetGroup?: string;
}


    
        /**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * 
     * @type {SchemaTitled}
     * @memberof ModelError
     */
    titledSchema?: SchemaTitled;
}
    
        /**
 * 
 * @export
 * @interface Pet
 */
export interface Pet {
    /**
     * 
     * @type {number}
     * @memberof Pet
     */
    id: number;
    /**
     * 
     * @type {ComponentsSchemasToy}
     * @memberof Pet
     */
    toy?: ComponentsSchemasToy;
    /**
     * 
     * @type {SchemasToy}
     * @memberof Pet
     */
    leastFavToy?: SchemasToy;
    /**
     * 
     * @type {FluffLevel}
     * @memberof Pet
     */
    favFluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    tag?: string;
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    name: string;
}


    
        /**
* @type PetToy
* @export
* @discriminatedUnion PetToy
* @discriminatorProperty kind
* @discriminatorValues BALL | TEDDY
* @subTypes Ball | FluffyTeddy
*/
export type PetToy = { kind: 'BALL' } & Ball | { kind: 'TEDDY' } & FluffyTeddy | { kind: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface SchemaTitled
 */
export interface SchemaTitled {
    /**
     * 
     * @type {string}
     * @memberof SchemaTitled
     */
    titledProp?: string;
}
    
        /**
 * 
 * @export
 * @interface SchemaUntitled
 */
export interface SchemaUntitled {
    /**
     * 
     * @type {string}
     * @memberof SchemaUntitled
     */
    untitledProp?: string;
}
    
        /**
 * 
 * @export
 * @interface SchemasToy
 */
export interface SchemasToy {
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    kind: string;
    /**
     * 
     * @type {FluffLevel}
     * @memberof SchemasToy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    targetGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    someEnum?: SchemasToySomeEnumEnum;
}


export const SchemasToySomeEnumEnum = {
    Foo: 'FOO',
    Bar: 'BAR'
} as const;

export type SchemasToySomeEnumEnum = typeof SchemasToySomeEnumEnum[keyof typeof SchemasToySomeEnumEnum] | UNKNOWN_ENUM_VARIANT  ;




/**
 * PetsApi - axios parameter creator
 * @export
 */
export const PetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('listPets', 'petId', petId)
            const localVarPath = \`/pets\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('showPetById', 'petId', petId)
            const localVarPath = \`/pets/{petId}\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PetsApi - functional programming interface
 * @export
 */
export const PetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.createPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showPetById(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showPetById(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.showPetById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PetsApi - factory interface
 * @export
 */
export const PetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PetsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets(options?: any): AxiosPromise<void> {
            return localVarFp.createPets(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(petId: string, options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById(petId: string, options?: any): AxiosPromise<Pet> {
            return localVarFp.showPetById(petId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PetsApi - object-oriented interface
 * @export
 * @class PetsApi
 * @extends {BaseAPI}
 */
export class PetsApi extends BaseAPI {
    /**
     * 
     * @summary Create a pet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public createPets(options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).createPets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {string} petId The id of the pet to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public listPets(petId: string, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).listPets(petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Info for a specific pet
     * @param {string} petId The id of the pet to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public showPetById(petId: string, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).showPetById(petId, options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular-complex\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://petstore.swagger.io/v1".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular-complex\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } 
        else {
            Object.keys(parameter).forEach(currentKey => 
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } 
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } 
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & {readonly [tag]: "UNKNOWN";};"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular-complex\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular-complex\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-modular-complex\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const FluffLevel = z.enum(["A", "B", "C"]).or(UNKNOWN_SCHEMA);
const targetGroup = z.string();
const schema_untitled = z
  .object({ untitledProp: z.string() })
  .partial()
  .passthrough();
const Color = z
  .object({
    untitledProp: z.string(),
    colorId: z.string(),
    untitled: schema_untitled,
  })
  .partial()
  .passthrough();
const Ball = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: z.string().optional().default("CHILDREN"),
  })
  .passthrough();
const FluffyTeddy = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: z.string().optional().default("CHILDREN"),
  })
  .passthrough();
const PetToy = z.discriminatedUnion("kind", [Ball, FluffyTeddy]);
const components_schemas_Toy = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: targetGroup.optional().default("CHILDREN"),
    someEnum: z.enum(["FOO", "BAR"]).or(UNKNOWN_SCHEMA).optional(),
    subId: z.string().optional(),
    name: z.string().optional(),
    color: Color.optional(),
    relates: PetToy.optional(),
  })
  .passthrough();
const schemas_Toy = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: z.string().optional().default("CHILDREN"),
    someEnum: z.enum(["FOO", "BAR"]).or(UNKNOWN_SCHEMA).optional(),
  })
  .passthrough();
const Pet = z
  .object({
    id: z.number().int(),
    toy: components_schemas_Toy.optional(),
    leastFavToy: schemas_Toy.optional(),
    favFluffLevel: FluffLevel.optional(),
    tag: z.string().optional(),
    name: z.string(),
  })
  .passthrough();
const Pets = z.array(Pet);
const HttpErrorCode = z.number();
const schema_titled = z
  .object({ titledProp: z.string() })
  .partial()
  .passthrough();
const Error = z
  .object({
    code: HttpErrorCode.int(),
    message: z.string(),
    titledSchema: schema_titled.optional(),
  })
  .passthrough();

export const schemas = {
  FluffLevel,
  targetGroup,
  schema_untitled,
  Color,
  Ball,
  FluffyTeddy,
  PetToy,
  components_schemas_Toy,
  schemas_Toy,
  Pet,
  Pets,
  HttpErrorCode,
  schema_titled,
  Error,
};
"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
 * 
 * @export
 * @interface Cat
 */
export interface Cat extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    type: 'CAT';
}
    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    bark: string;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}
    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues CAT | DOG
* @subTypes Cat | Dog
*/
export type Pet = { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {number}
     * @memberof PetBase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } 
        else {
            Object.keys(parameter).forEach(currentKey => 
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } 
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } 
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & {readonly [tag]: "UNKNOWN";};"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const PetBase = z
  .object({ id: z.number().int(), type: z.string() })
  .passthrough();
const Cat = PetBase.merge(
  z.object({ color: z.string(), type: z.string() }).passthrough()
);
const Dog = PetBase.merge(
  z.object({ bark: z.string(), type: z.string() }).passthrough()
);
const Pet = z.discriminatedUnion("type", [Cat, Dog]);
const Pets = z.array(Pet);

export const schemas = {
  PetBase,
  Cat,
  Dog,
  Pet,
  Pets,
};
"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-simple\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
 * 
 * @export
 * @interface Cat
 */
export interface Cat extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    type: 'CAT';
}
    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    bark: string;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}
    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues CAT | DOG
* @subTypes Cat | Dog
*/
export type Pet = { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {number}
     * @memberof PetBase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-simple\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-simple\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } 
        else {
            Object.keys(parameter).forEach(currentKey => 
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } 
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } 
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & {readonly [tag]: "UNKNOWN";};"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-simple\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-simple\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\test\\specs\\pets-simple\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const PetBase = z
  .object({ id: z.number().int(), type: z.string() })
  .passthrough();
const Cat = PetBase.merge(
  z.object({ color: z.string(), type: z.string() }).passthrough()
);
const Dog = PetBase.merge(
  z.object({ bark: z.string(), type: z.string() }).passthrough()
);
const Pet = z.discriminatedUnion("type", [Cat, Dog]);
const Pets = z.array(Pet);

export const schemas = {
  PetBase,
  Cat,
  Dog,
  Pet,
  Pets,
};
"
`;

exports[`ggenerate openapi integration: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
* @type Cat
* @export
* @discriminatedUnion Cat
* @discriminatorProperty catType
* @discriminatorValues SEAM | SHORT
* @subTypes Seam | ShortHair
*/
export type Cat = { catType: 'SEAM' } & Seam | { catType: 'SHORT' } & ShortHair | { catType: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface CatBase
 */
export interface CatBase {
    /**
     * 
     * @type {string}
     * @memberof CatBase
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof CatBase
     * @discriminator catType
     */
    catType: string;
}
    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    bark: string;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}
    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues CAT | DOG
* @subTypes Cat | Dog
*/
export type Pet = { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {number}
     * @memberof PetBase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
}
    
        /**
 * 
 * @export
 * @interface Seam
 */
export interface Seam extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     * @discriminator catType
     */
    catType: 'SEAM';
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    type: 'CAT';
}
    
        /**
 * 
 * @export
 * @interface ShortHair
 */
export interface ShortHair {
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     * @discriminator catType
     */
    catType: 'SHORT';
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    type: 'CAT';
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('getPet', 'petId', petId)
            const localVarPath = \`/pets/{petId}\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPet(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPet(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet(petId: string, options?: any): AxiosPromise<Pet> {
            return localVarFp.getPet(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get a Pet
     * @param {string} petId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPet(petId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPet(petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`ggenerate openapi integration: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`ggenerate openapi integration: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } 
        else {
            Object.keys(parameter).forEach(currentKey => 
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } 
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } 
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & {readonly [tag]: "UNKNOWN";};"
`;

exports[`ggenerate openapi integration: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`ggenerate openapi integration: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`ggenerate openapi integration: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const PetBase = z
  .object({ id: z.number().int(), type: z.string() })
  .passthrough();
const Seam = PetBase.merge(
  z
    .object({
      color: z.string(),
      catType: z.string().default("SEAM"),
      angryLevel: z.string().optional(),
      type: z.string(),
    })
    .passthrough()
);
const ShortHair = z
  .object({
    color: z.string(),
    catType: z.string().default("SHORT"),
    angryLevel: z.string().optional(),
    type: z.string(),
  })
  .passthrough();
const Cat = z.discriminatedUnion("catType", [Seam, ShortHair]);
const Dog = PetBase.merge(
  z.object({ bark: z.string(), type: z.string() }).passthrough()
);
const Pet = z.discriminatedUnion("type", [Cat, Dog]);
const Pets = z.array(Pet);

export const schemas = {
  PetBase,
  Seam,
  ShortHair,
  Cat,
  Dog,
  Pet,
  Pets,
};
"
`;
