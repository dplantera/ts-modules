// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\api.js 1`] = `
""use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.Pet = exports.CatBaseCatTypeEnums = exports.CatBaseCatTypeEnum = exports.Cat = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
var Cat;
(function (Cat) {
    /** All handler must return the same type*/
    function match(union, handler) {
        if (union.catType in handler) {
            return handler[union.catType](union);
        }
        return handler.onDefault(union);
    }
    Cat.match = match;
    /** All handler must return the same type*/
    function matchPartial(union, handler) {
        var _a, _b;
        if (union.catType in handler) {
            return (_a = handler[union.catType]) === null || _a === void 0 ? void 0 : _a.call(handler, union);
        }
        return (_b = handler.onDefault) === null || _b === void 0 ? void 0 : _b.call(handler, union);
    }
    Cat.matchPartial = matchPartial;
})(Cat || (exports.Cat = Cat = {}));
exports.CatBaseCatTypeEnum = {
    Seam: 'SEAM',
    Short: 'SHORT'
};
var CatBaseCatTypeEnums;
(function (CatBaseCatTypeEnums) {
    /** All handler must return the same type*/
    function match(enumValue, handler) {
        if (enumValue in handler) {
            return handler[enumValue](enumValue);
        }
        return handler.onDefault(enumValue);
    }
    CatBaseCatTypeEnums.match = match;
    /** All handler must return the same type*/
    function matchPartial(enumValue, handler) {
        var _a, _b;
        if (enumValue in handler) {
            return (_a = handler[enumValue]) === null || _a === void 0 ? void 0 : _a.call(handler, enumValue);
        }
        return (_b = handler.onDefault) === null || _b === void 0 ? void 0 : _b.call(handler, enumValue);
    }
    CatBaseCatTypeEnums.matchPartial = matchPartial;
})(CatBaseCatTypeEnums || (exports.CatBaseCatTypeEnums = CatBaseCatTypeEnums = {}));
var Pet;
(function (Pet) {
    /** All handler must return the same type*/
    function match(union, handler) {
        if (union.type in handler) {
            return handler[union.type](union);
        }
        return handler.onDefault(union);
    }
    Pet.match = match;
    /** All handler must return the same type*/
    function matchPartial(union, handler) {
        var _a, _b;
        if (union.type in handler) {
            return (_a = handler[union.type]) === null || _a === void 0 ? void 0 : _a.call(handler, union);
        }
        return (_b = handler.onDefault) === null || _b === void 0 ? void 0 : _b.call(handler, union);
    }
    Pet.matchPartial = matchPartial;
})(Pet || (exports.Pet = Pet = {}));
/**
 * DefaultApi - axios parameter creator
 * @export
 */
var DefaultApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get a Pet
         * @param {string} petId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: function (petId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'petId' is not null or undefined
                    (0, common_1.assertParamExists)('getPet', 'petId', petId);
                    localVarPath = "/pets/{petId}"
                        .replace("{".concat("petId", "}"), encodeURIComponent(String(petId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/pets";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
var DefaultApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get a Pet
         * @param {string} petId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: function (petId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPet(petId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DefaultApi.getPet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPets(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DefaultApi.listPets']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
var DefaultApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         *
         * @summary Get a Pet
         * @param {string} petId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: function (petId, options) {
            return localVarFp.getPet(petId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: function (options) {
            return localVarFp.listPets(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get a Pet
     * @param {string} petId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.getPet = function (petId, options) {
        var _this = this;
        return (0, exports.DefaultApiFp)(this.configuration).getPet(petId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.listPets = function (options) {
        var _this = this;
        return (0, exports.DefaultApiFp)(this.configuration).listPets(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DefaultApi;
}(base_1.BaseAPI));
exports.DefaultApi = DefaultApi;
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
* @type Cat
* @export
* @discriminatedUnion Cat
* @discriminatorProperty catType
* @discriminatorValues SEAM | SHORT
* @subTypes Seam | ShortHair
*/
export type Cat = { catType: 'SEAM' } & Seam | { catType: 'SHORT' } & ShortHair | { catType: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Cat {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Cat, R> = {
        [K in T as K['catType']]: Handler<Extract<T, { type: K['catType'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Cat,
        handler: MatchObj<Cat, R>
    ): R {
        if (union.catType in handler) {
            return handler[union.catType](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Cat,
        handler: Partial<MatchObj<Cat, R>>
    ): R | undefined {
        if (union.catType in handler) {
            return handler[union.catType]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
    
        /**
 * 
 * @export
 * @interface CatBase
 */
export interface CatBase {
    /**
     * 
     * @type {string}
     * @memberof CatBase
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof CatBase
     * @discriminator catType
     */
    catType?: CatBaseCatTypeEnum;
}


export const CatBaseCatTypeEnum = {
    Seam: 'SEAM',
    Short: 'SHORT'
} as const;

export module CatBaseCatTypeEnums {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends CatBaseCatTypeEnum, R> = {
        [K in T as K]: Handler<Extract<T, K>, R>;
    }  & { onDefault: Handler<unknown, R> };
    /** All handler must return the same type*/
    export function match<R>(enumValue: CatBaseCatTypeEnum, handler: MatchObj<CatBaseCatTypeEnum, R>): R {
        if (enumValue in handler) {
            return handler[enumValue](enumValue as never);
        }
        return handler.onDefault(enumValue);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(enumValue: CatBaseCatTypeEnum, handler: Partial<MatchObj<CatBaseCatTypeEnum, R> >): R | undefined {
        if (enumValue in handler) {
            return handler[enumValue]?.(enumValue as never);
        }
        return handler.onDefault?.(enumValue);
    }
}

export type CatBaseCatTypeEnum = typeof CatBaseCatTypeEnum[keyof typeof CatBaseCatTypeEnum] | UNKNOWN_ENUM_VARIANT  ;

    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    bark: string;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}
    
        /**
 * 
 * @export
 * @interface GenericPet
 */
export interface GenericPet extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof GenericPet
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericPet
     */
    type: 'BIRD' | 'HAMSTER';
}
    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues BIRD | CAT | DOG | HAMSTER
* @subTypes GenericPet | Cat | Dog | GenericPet
*/
export type Pet = { type: 'BIRD' } & GenericPet | { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: 'HAMSTER' } & GenericPet | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Pet {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Pet, R> = {
        [K in T as K['type']]: Handler<Extract<T, { type: K['type'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Pet,
        handler: MatchObj<Pet, R>
    ): R {
        if (union.type in handler) {
            return handler[union.type](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Pet,
        handler: Partial<MatchObj<Pet, R>>
    ): R | undefined {
        if (union.type in handler) {
            return handler[union.type]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {number}
     * @memberof PetBase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
}
    
        /**
 * 
 * @export
 * @interface Seam
 */
export interface Seam extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     * @discriminator catType
     */
    catType: 'SEAM';
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    type: 'CAT';
}
    
        /**
 * 
 * @export
 * @interface ShortHair
 */
export interface ShortHair {
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     * @discriminator catType
     */
    catType: 'SHORT';
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    type: 'CAT';
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('getPet', 'petId', petId)
            const localVarPath = \`/pets/{petId}\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPet(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPet(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet(petId: string, options?: any): AxiosPromise<Pet> {
            return localVarFp.getPet(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get a Pet
     * @param {string} petId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPet(petId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPet(petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\base.js 1`] = `
""use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.operationServerMap = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;
var axios_1 = require("axios");
exports.BASE_PATH = "http://localhost".replace(/\\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, axios) {
        if (basePath === void 0) { basePath = exports.BASE_PATH; }
        if (axios === void 0) { axios = axios_1.default; }
        var _a;
        this.basePath = basePath;
        this.axios = axios;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = (_a = configuration.basePath) !== null && _a !== void 0 ? _a : basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 *
 * @export
 */
exports.operationServerMap = {};
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\bundled-api.yml 1`] = `
"openapi: 3.0.3
info:
  version: 1.0.1
  title: some title
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
  /pets/{petId}:
    get:
      summary: Get a Pet
      operationId: getPet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
components:
  schemas:
    PetBase:
      title: PetBase
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
      discriminator:
        propertyName: type
    Dog:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            bark:
              type: string
            type:
              type: string
              x-const: DOG
              example: DOG
          required:
            - bark
            - type
    CatBase:
      allOf:
        - {}
        - title: CatBase
          properties:
            color:
              type: string
            catType:
              type: string
              enum:
                - SEAM
                - SHORT
              title: CatType
          required:
            - color
          discriminator:
            propertyName: catType
    Seam:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - title: Seam
          required:
            - color
            - catType
            - type
          discriminator:
            propertyName: catType
          properties:
            color:
              type: string
            catType:
              type: string
              title: CatType
              default: SEAM
              x-const: SEAM
              example: SEAM
            angryLevel:
              type: string
            type:
              type: string
              x-const: CAT
              example: CAT
    ShortHair:
      title: ShortHair
      required:
        - color
        - catType
        - type
      discriminator:
        propertyName: catType
      properties:
        color:
          type: string
        catType:
          type: string
          title: CatType
          default: SHORT
          x-const: SHORT
          example: SHORT
        angryLevel:
          type: string
        type:
          type: string
          x-const: CAT
          example: CAT
    Cat:
      oneOf:
        - $ref: '#/components/schemas/Seam'
        - $ref: '#/components/schemas/ShortHair'
      discriminator:
        propertyName: catType
        mapping:
          SEAM: '#/components/schemas/Seam'
          SHORT: '#/components/schemas/ShortHair'
    GenericPet:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - title: GenericPet
          properties:
            name:
              type: string
            type:
              type: string
              x-const:
                - BIRD
                - HAMSTER
              example: HAMSTER
          required:
            - type
    Pet:
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
        - $ref: '#/components/schemas/GenericPet'
      discriminator:
        propertyName: type
        mapping:
          DOG: '#/components/schemas/Dog'
          CAT: '#/components/schemas/Cat'
          BIRD: '#/components/schemas/GenericPet'
          HAMSTER: '#/components/schemas/GenericPet'
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\common.js 1`] = `
""use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;
var base_1 = require("./base");
/**
 *
 * @export
 */
exports.DUMMY_BASE_URL = 'https://example.com';
/**
 *
 * @throws {RequiredError}
 * @export
 */
var assertParamExists = function (functionName, paramName, paramValue) {
    if (paramValue === null || paramValue === undefined) {
        throw new base_1.RequiredError(paramName, "Required parameter ".concat(paramName, " was null or undefined when calling ").concat(functionName, "."));
    }
};
exports.assertParamExists = assertParamExists;
/**
 *
 * @export
 */
var setApiKeyToObject = function (object, keyParamName, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var localVarApiKeyValue, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                    if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                    return [4 /*yield*/, configuration.apiKey(keyParamName)];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, configuration.apiKey];
                case 3:
                    _a = _b.sent();
                    _b.label = 4;
                case 4:
                    localVarApiKeyValue = _a;
                    object[keyParamName] = localVarApiKeyValue;
                    _b.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
};
exports.setApiKeyToObject = setApiKeyToObject;
/**
 *
 * @export
 */
var setBasicAuthToObject = function (object, configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
};
exports.setBasicAuthToObject = setBasicAuthToObject;
/**
 *
 * @export
 */
var setBearerAuthToObject = function (object, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var accessToken, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                    if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                    return [4 /*yield*/, configuration.accessToken()];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, configuration.accessToken];
                case 3:
                    _a = _b.sent();
                    _b.label = 4;
                case 4:
                    accessToken = _a;
                    object["Authorization"] = "Bearer " + accessToken;
                    _b.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
};
exports.setBearerAuthToObject = setBearerAuthToObject;
/**
 *
 * @export
 */
var setOAuthToObject = function (object, name, scopes, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var localVarAccessTokenValue, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                    if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                    return [4 /*yield*/, configuration.accessToken(name, scopes)];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, configuration.accessToken];
                case 3:
                    _a = _b.sent();
                    _b.label = 4;
                case 4:
                    localVarAccessTokenValue = _a;
                    object["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    _b.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
};
exports.setOAuthToObject = setOAuthToObject;
function setFlattenedQueryParams(urlSearchParams, parameter, key) {
    if (key === void 0) { key = ""; }
    if (parameter == null)
        return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            parameter.forEach(function (item) { return setFlattenedQueryParams(urlSearchParams, item, key); });
        }
        else {
            Object.keys(parameter).forEach(function (currentKey) {
                return setFlattenedQueryParams(urlSearchParams, parameter[currentKey], "".concat(key).concat(key !== '' ? '.' : '').concat(currentKey));
            });
        }
    }
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        }
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}
/**
 *
 * @export
 */
var setSearchParams = function (url) {
    var objects = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        objects[_i - 1] = arguments[_i];
    }
    var searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
};
exports.setSearchParams = setSearchParams;
/**
 *
 * @export
 */
var serializeDataIfNeeded = function (value, requestOptions, configuration) {
    var nonString = typeof value !== 'string';
    var needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
};
exports.serializeDataIfNeeded = serializeDataIfNeeded;
/**
 *
 * @export
 */
var toPathString = function (url) {
    return url.pathname + url.search + url.hash;
};
exports.toPathString = toPathString;
/**
 *
 * @export
 */
var createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {
    return function (axios, basePath) {
        var _a;
        if (axios === void 0) { axios = globalAxios; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        var axiosRequestArgs = __assign(__assign({}, axiosArgs.options), { url: (axios.defaults.baseURL ? '' : (_a = configuration === null || configuration === void 0 ? void 0 : configuration.basePath) !== null && _a !== void 0 ? _a : basePath) + axiosArgs.url });
        return axios.request(axiosRequestArgs);
    };
};
exports.createRequestFunction = createRequestFunction;
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from "./configuration";
import type {RequestArgs} from "./base";
import type {AxiosInstance, AxiosResponse} from 'axios';
import {RequiredError} from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {username: configuration.username, password: configuration.password};
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & { readonly [tag]: "UNKNOWN"; };
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\configuration.js 1`] = `
""use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
var Configuration = /** @class */ (function () {
    function Configuration(param) {
        if (param === void 0) { param = {}; }
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    Configuration.prototype.isJsonMime = function (mime) {
        var jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    };
    return Configuration;
}());
exports.Configuration = Configuration;
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\index.js 1`] = `
""use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./api.js"), exports);
__exportStar(require("./configuration.js"), exports);
__exportStar(require("./zod.js"), exports);
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\zod.js 1`] = `
""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.schemas = void 0;
var zod_1 = require("zod");
var UNKNOWN_SCHEMA = zod_1.z.string().transform(function (e) { return e; });
var PetBase = zod_1.z
    .object({ id: zod_1.z.number().int(), type: zod_1.z.string() })
    .passthrough();
var Seam = PetBase.merge(zod_1.z
    .object({
    color: zod_1.z.string(),
    catType: zod_1.z.string().default("SEAM"),
    angryLevel: zod_1.z.string().optional(),
    type: zod_1.z.string(),
})
    .passthrough());
var ShortHair = zod_1.z
    .object({
    color: zod_1.z.string(),
    catType: zod_1.z.string().default("SHORT"),
    angryLevel: zod_1.z.string().optional(),
    type: zod_1.z.string(),
})
    .passthrough();
var Cat = zod_1.z.discriminatedUnion("catType", [Seam, ShortHair]);
var Dog = PetBase.merge(zod_1.z.object({ bark: zod_1.z.string(), type: zod_1.z.string() }).passthrough());
var GenericPet = PetBase.merge(zod_1.z.object({ name: zod_1.z.string().optional(), type: zod_1.z.string() }).passthrough());
var Pet = zod_1.z.discriminatedUnion("type", [Cat, Dog, GenericPet]);
var Pets = zod_1.z.array(Pet);
exports.schemas = {
    PetBase: PetBase,
    Seam: Seam,
    ShortHair: ShortHair,
    Cat: Cat,
    Dog: Dog,
    GenericPet: GenericPet,
    Pet: Pet,
    Pets: Pets,
};
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const PetBase = z
  .object({ id: z.number().int(), type: z.string() })
  .passthrough();
const Seam = PetBase.merge(
  z
    .object({
      color: z.string(),
      catType: z.string().default("SEAM"),
      angryLevel: z.string().optional(),
      type: z.string(),
    })
    .passthrough()
);
const ShortHair = z
  .object({
    color: z.string(),
    catType: z.string().default("SHORT"),
    angryLevel: z.string().optional(),
    type: z.string(),
  })
  .passthrough();
const Cat = z.discriminatedUnion("catType", [Seam, ShortHair]);
const Dog = PetBase.merge(
  z.object({ bark: z.string(), type: z.string() }).passthrough()
);
const GenericPet = PetBase.merge(
  z.object({ name: z.string().optional(), type: z.string() }).passthrough()
);
const Pet = z.discriminatedUnion("type", [Cat, Dog, GenericPet]);
const Pets = z.array(Pet);

export const schemas = {
  PetBase,
  Seam,
  ShortHair,
  Cat,
  Dog,
  GenericPet,
  Pet,
  Pets,
};
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
 * 
 * @export
 * @interface Cat
 */
export interface Cat extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    breed?: CatBreedEnum;
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    type: 'CAT';
}


export const CatBreedEnum = {
    A: 'CAT_A',
    B: 'CAT_B'
} as const;

export module CatBreedEnums {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends CatBreedEnum, R> = {
        [K in T as K]: Handler<Extract<T, K>, R>;
    }  & { onDefault: Handler<unknown, R> };
    /** All handler must return the same type*/
    export function match<R>(enumValue: CatBreedEnum, handler: MatchObj<CatBreedEnum, R>): R {
        if (enumValue in handler) {
            return handler[enumValue](enumValue as never);
        }
        return handler.onDefault(enumValue);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(enumValue: CatBreedEnum, handler: Partial<MatchObj<CatBreedEnum, R> >): R | undefined {
        if (enumValue in handler) {
            return handler[enumValue]?.(enumValue as never);
        }
        return handler.onDefault?.(enumValue);
    }
}

export type CatBreedEnum = typeof CatBreedEnum[keyof typeof CatBreedEnum] | UNKNOWN_ENUM_VARIANT  ;

    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {boolean}
     * @memberof Dog
     */
    fluffy?: boolean;
    /**
     * 
     * @type {DogEnum}
     * @memberof Dog
     */
    breed?: DogEnum;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}


    /**
 * 
 * @export
 * @enum {string}
 */

export const DogEnum = {
    A: 'DOG_A',
    B: 'DOG_B'
} as const;

export type DogEnum = typeof DogEnum[keyof typeof DogEnum]  | UNKNOWN_ENUM_VARIANT;


    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues CAT | DOG
* @subTypes Cat | Dog
*/
export type Pet = { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Pet {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Pet, R> = {
        [K in T as K['type']]: Handler<Extract<T, { type: K['type'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Pet,
        handler: MatchObj<Pet, R>
    ): R {
        if (union.type in handler) {
            return handler[union.type](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Pet,
        handler: Partial<MatchObj<Pet, R>>
    ): R | undefined {
        if (union.type in handler) {
            return handler[union.type]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     */
    name?: string;
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/v1/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPets(options?: any): AxiosPromise<Pet> {
            return localVarFp.getPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://https:/".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\bundled-pets-api.yml 1`] = `
"openapi: 3.0.3
info:
  title: My service
  description: My service
  version: 1.0.0
servers:
  - url: https://
paths:
  /v1/pets:
    get:
      summary: Get pets
      operationId: getPets
      responses:
        '200':
          description: Ok response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
components:
  schemas:
    PetBase:
      type: object
      discriminator:
        propertyName: type
      required:
        - type
      properties:
        type:
          type: string
        name:
          type: string
    DogEnum:
      type: string
      enum:
        - DOG_A
        - DOG_B
    Dog:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            fluffy:
              type: boolean
            breed:
              $ref: '#/components/schemas/DogEnum'
            type:
              type: string
              x-const: DOG
              example: DOG
          required:
            - type
    Cat:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            breed:
              type: string
              enum:
                - CAT_A
                - CAT_B
            type:
              type: string
              x-const: CAT
              example: CAT
          required:
            - type
    Pet:
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
      discriminator:
        propertyName: type
        mapping:
          DOG: '#/components/schemas/Dog'
          CAT: '#/components/schemas/Cat'
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from "./configuration";
import type {RequestArgs} from "./base";
import type {AxiosInstance, AxiosResponse} from 'axios';
import {RequiredError} from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {username: configuration.username, password: configuration.password};
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & { readonly [tag]: "UNKNOWN"; };
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const PetBase = z
  .object({ type: z.string(), name: z.string().optional() })
  .passthrough();
const Cat = PetBase.merge(
  z
    .object({ breed: z.enum(["CAT_A", "CAT_B"]).or(UNKNOWN_SCHEMA).optional(), type: z.string() })
    .passthrough()
);
const DogEnum = z.enum(["DOG_A", "DOG_B"]).or(UNKNOWN_SCHEMA);
const Dog = PetBase.merge(
  z
    .object({
      fluffy: z.boolean().optional(),
      breed: DogEnum.optional(),
      type: z.string(),
    })
    .passthrough()
);
const Pet = z.discriminatedUnion("type", [Cat, Dog]);
export const schemas = {
  PetBase,
  Cat,
  DogEnum,
  Dog,
  Pet,
};
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
 * 
 * @export
 * @interface Ball
 */
export interface Ball {
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    kind: 'BALL';
    /**
     * 
     * @type {FluffLevel}
     * @memberof Ball
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    targetGroup?: string;
}


    
        /**
 * 
 * @export
 * @interface Color
 */
export interface Color {
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    untitledProp?: string;
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    colorId?: string;
    /**
     * 
     * @type {SchemaUntitled}
     * @memberof Color
     */
    untitled?: SchemaUntitled;
}
    
        /**
 * 
 * @export
 * @interface ComponentsSchemasToy
 */
export interface ComponentsSchemasToy {
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    kind: string;
    /**
     * 
     * @type {FluffLevel}
     * @memberof ComponentsSchemasToy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    targetGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    someEnum?: ComponentsSchemasToySomeEnumEnum;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    subId?: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    name?: string;
    /**
     * 
     * @type {Color}
     * @memberof ComponentsSchemasToy
     */
    color?: Color;
    /**
     * 
     * @type {PetToy}
     * @memberof ComponentsSchemasToy
     */
    relates?: PetToy;
}


export const ComponentsSchemasToySomeEnumEnum = {
    Foo: 'FOO',
    Bar: 'BAR'
} as const;

export module ComponentsSchemasToySomeEnumEnums {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends ComponentsSchemasToySomeEnumEnum, R> = {
        [K in T as K]: Handler<Extract<T, K>, R>;
    }  & { onDefault: Handler<unknown, R> };
    /** All handler must return the same type*/
    export function match<R>(enumValue: ComponentsSchemasToySomeEnumEnum, handler: MatchObj<ComponentsSchemasToySomeEnumEnum, R>): R {
        if (enumValue in handler) {
            return handler[enumValue](enumValue as never);
        }
        return handler.onDefault(enumValue);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(enumValue: ComponentsSchemasToySomeEnumEnum, handler: Partial<MatchObj<ComponentsSchemasToySomeEnumEnum, R> >): R | undefined {
        if (enumValue in handler) {
            return handler[enumValue]?.(enumValue as never);
        }
        return handler.onDefault?.(enumValue);
    }
}

export type ComponentsSchemasToySomeEnumEnum = typeof ComponentsSchemasToySomeEnumEnum[keyof typeof ComponentsSchemasToySomeEnumEnum] | UNKNOWN_ENUM_VARIANT  ;

    /**
 * 
 * @export
 * @enum {string}
 */

export const FluffLevel = {
    A: 'A',
    B: 'B',
    C: 'C'
} as const;

export type FluffLevel = typeof FluffLevel[keyof typeof FluffLevel]  | UNKNOWN_ENUM_VARIANT;


    
        /**
 * 
 * @export
 * @interface FluffyTeddy
 */
export interface FluffyTeddy {
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    kind: 'TEDDY';
    /**
     * 
     * @type {FluffLevel}
     * @memberof FluffyTeddy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    targetGroup?: string;
}


    
        /**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * 
     * @type {SchemaTitled}
     * @memberof ModelError
     */
    titledSchema?: SchemaTitled;
}
    
        /**
 * 
 * @export
 * @interface Pet
 */
export interface Pet {
    /**
     * 
     * @type {number}
     * @memberof Pet
     */
    id: number;
    /**
     * 
     * @type {ComponentsSchemasToy}
     * @memberof Pet
     */
    toy?: ComponentsSchemasToy;
    /**
     * 
     * @type {SchemasToy}
     * @memberof Pet
     */
    leastFavToy?: SchemasToy;
    /**
     * 
     * @type {FluffLevel}
     * @memberof Pet
     */
    favFluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    tag?: string;
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    name: string;
}


    
        /**
* @type PetToy
* @export
* @discriminatedUnion PetToy
* @discriminatorProperty kind
* @discriminatorValues BALL | TEDDY
* @subTypes Ball | FluffyTeddy
*/
export type PetToy = { kind: 'BALL' } & Ball | { kind: 'TEDDY' } & FluffyTeddy | { kind: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module PetToy {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends PetToy, R> = {
        [K in T as K['kind']]: Handler<Extract<T, { type: K['kind'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: PetToy,
        handler: MatchObj<PetToy, R>
    ): R {
        if (union.kind in handler) {
            return handler[union.kind](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: PetToy,
        handler: Partial<MatchObj<PetToy, R>>
    ): R | undefined {
        if (union.kind in handler) {
            return handler[union.kind]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
    
        /**
 * 
 * @export
 * @interface SchemaTitled
 */
export interface SchemaTitled {
    /**
     * 
     * @type {string}
     * @memberof SchemaTitled
     */
    titledProp?: string;
}
    
        /**
 * 
 * @export
 * @interface SchemaUntitled
 */
export interface SchemaUntitled {
    /**
     * 
     * @type {string}
     * @memberof SchemaUntitled
     */
    untitledProp?: string;
}
    
        /**
 * 
 * @export
 * @interface SchemasToy
 */
export interface SchemasToy {
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    kind: string;
    /**
     * 
     * @type {FluffLevel}
     * @memberof SchemasToy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    targetGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    someEnum?: SchemasToySomeEnumEnum;
}


export const SchemasToySomeEnumEnum = {
    Foo: 'FOO',
    Bar: 'BAR'
} as const;

export module SchemasToySomeEnumEnums {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends SchemasToySomeEnumEnum, R> = {
        [K in T as K]: Handler<Extract<T, K>, R>;
    }  & { onDefault: Handler<unknown, R> };
    /** All handler must return the same type*/
    export function match<R>(enumValue: SchemasToySomeEnumEnum, handler: MatchObj<SchemasToySomeEnumEnum, R>): R {
        if (enumValue in handler) {
            return handler[enumValue](enumValue as never);
        }
        return handler.onDefault(enumValue);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(enumValue: SchemasToySomeEnumEnum, handler: Partial<MatchObj<SchemasToySomeEnumEnum, R> >): R | undefined {
        if (enumValue in handler) {
            return handler[enumValue]?.(enumValue as never);
        }
        return handler.onDefault?.(enumValue);
    }
}

export type SchemasToySomeEnumEnum = typeof SchemasToySomeEnumEnum[keyof typeof SchemasToySomeEnumEnum] | UNKNOWN_ENUM_VARIANT  ;




/**
 * PetsApi - axios parameter creator
 * @export
 */
export const PetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('listPets', 'petId', petId)
            const localVarPath = \`/pets\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('showPetById', 'petId', petId)
            const localVarPath = \`/pets/{petId}\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PetsApi - functional programming interface
 * @export
 */
export const PetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.createPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showPetById(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showPetById(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.showPetById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PetsApi - factory interface
 * @export
 */
export const PetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PetsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets(options?: any): AxiosPromise<void> {
            return localVarFp.createPets(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(petId: string, options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById(petId: string, options?: any): AxiosPromise<Pet> {
            return localVarFp.showPetById(petId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PetsApi - object-oriented interface
 * @export
 * @class PetsApi
 * @extends {BaseAPI}
 */
export class PetsApi extends BaseAPI {
    /**
     * 
     * @summary Create a pet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public createPets(options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).createPets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {string} petId The id of the pet to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public listPets(petId: string, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).listPets(petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Info for a specific pet
     * @param {string} petId The id of the pet to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public showPetById(petId: string, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).showPetById(petId, options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://petstore.swagger.io/v1".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\bundled-petstore-api.yml 1`] = `
"openapi: 3.0.3
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/PathPetId'
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          $ref: '#/components/responses/Default'
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          $ref: '#/components/responses/Default'
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/PathPetId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          $ref: '#/components/responses/Default'
components:
  parameters:
    PathPetId:
      name: petId
      in: path
      required: true
      description: The id of the pet to retrieve
      schema:
        type: string
  schemas:
    HttpErrorCode:
      type: integer
      format: int32
    schema-titled:
      title: Titled Schema
      properties:
        titledProp:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: '#/components/schemas/HttpErrorCode'
        message:
          type: string
        titledSchema:
          $ref: '#/components/schemas/schema-titled'
    FluffLevel:
      type: string
      enum:
        - A
        - B
        - C
    schemas-Toy:
      title: Toy
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        targetGroup:
          type: string
          x-extensible-enum:
            - PETS
            - CHILDREN
          default: CHILDREN
        someEnum:
          type: string
          enum:
            - FOO
            - BAR
          title: FooBar
      required:
        - id
        - price
        - kind
    schema-untitled:
      properties:
        untitledProp:
          type: string
    Color:
      type: object
      properties:
        untitledProp:
          type: string
        colorId:
          type: string
        untitled:
          $ref: '#/components/schemas/schema-untitled'
    targetGroup:
      type: string
      x-extensible-enum:
        - PETS
        - CHILDREN
      default: CHILDREN
    Ball:
      required:
        - id
        - price
        - kind
      title: Ball
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
          x-const: BALL
          example: BALL
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        targetGroup:
          type: string
          x-extensible-enum:
            - PETS
            - CHILDREN
          default: CHILDREN
    FluffyTeddy:
      required:
        - id
        - price
        - kind
      title: Teddy
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
          x-const: TEDDY
          example: TEDDY
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        targetGroup:
          type: string
          x-extensible-enum:
            - PETS
            - CHILDREN
          default: CHILDREN
    PetToy:
      oneOf:
        - $ref: '#/components/schemas/Ball'
        - $ref: '#/components/schemas/FluffyTeddy'
      discriminator:
        propertyName: kind
        mapping:
          BALL: '#/components/schemas/Ball'
          TEDDY: '#/components/schemas/FluffyTeddy'
    components-schemas-Toy:
      title: Toy
      required:
        - id
        - kind
        - price
        - string
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        targetGroup:
          $ref: '#/components/schemas/targetGroup'
        someEnum:
          type: string
          enum:
            - FOO
            - BAR
          title: FooBar
        subId:
          type: string
        name:
          type: string
        color:
          $ref: '#/components/schemas/Color'
        relates:
          $ref: '#/components/schemas/PetToy'
    Pet:
      type: object
      required:
        - id
        - name
      example:
        foo: ''
        bar: 1234
        foobar: true
      properties:
        id:
          type: integer
          format: int64
        toy:
          $ref: '#/components/schemas/components-schemas-Toy'
        leastFavToy:
          $ref: '#/components/schemas/schemas-Toy'
        favFluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        tag:
          type: string
          example:
            description: default string example
            value: some string
        name:
          type: string
          example:
            description: default string example
            value: some string
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
  responses:
    Default:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from "./configuration";
import type {RequestArgs} from "./base";
import type {AxiosInstance, AxiosResponse} from 'axios';
import {RequiredError} from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {username: configuration.username, password: configuration.password};
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & { readonly [tag]: "UNKNOWN"; };
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const FluffLevel = z.enum(["A", "B", "C"]).or(UNKNOWN_SCHEMA);
const targetGroup = z.string();
const schema_untitled = z
  .object({ untitledProp: z.string() })
  .partial()
  .passthrough();
const Color = z
  .object({
    untitledProp: z.string(),
    colorId: z.string(),
    untitled: schema_untitled,
  })
  .partial()
  .passthrough();
const Ball = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: z.string().optional().default("CHILDREN"),
  })
  .passthrough();
const FluffyTeddy = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: z.string().optional().default("CHILDREN"),
  })
  .passthrough();
const PetToy = z.discriminatedUnion("kind", [Ball, FluffyTeddy]);
const components_schemas_Toy = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: targetGroup.optional().default("CHILDREN"),
    someEnum: z.enum(["FOO", "BAR"]).or(UNKNOWN_SCHEMA).optional(),
    subId: z.string().optional(),
    name: z.string().optional(),
    color: Color.optional(),
    relates: PetToy.optional(),
  })
  .passthrough();
const schemas_Toy = z
  .object({
    id: z.string(),
    price: z.string(),
    kind: z.string(),
    fluffLevel: FluffLevel.optional(),
    targetGroup: z.string().optional().default("CHILDREN"),
    someEnum: z.enum(["FOO", "BAR"]).or(UNKNOWN_SCHEMA).optional(),
  })
  .passthrough();
const Pet = z
  .object({
    id: z.number().int(),
    toy: components_schemas_Toy.optional(),
    leastFavToy: schemas_Toy.optional(),
    favFluffLevel: FluffLevel.optional(),
    tag: z.string().optional(),
    name: z.string(),
  })
  .passthrough();
const Pets = z.array(Pet);
const HttpErrorCode = z.number();
const schema_titled = z
  .object({ titledProp: z.string() })
  .partial()
  .passthrough();
const Error = z
  .object({
    code: HttpErrorCode.int(),
    message: z.string(),
    titledSchema: schema_titled.optional(),
  })
  .passthrough();

export const schemas = {
  FluffLevel,
  targetGroup,
  schema_untitled,
  Color,
  Ball,
  FluffyTeddy,
  PetToy,
  components_schemas_Toy,
  schemas_Toy,
  Pet,
  Pets,
  HttpErrorCode,
  schema_titled,
  Error,
};
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
 * 
 * @export
 * @interface Cat
 */
export interface Cat extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    type: 'CAT';
}
    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    bark: string;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}
    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues CAT | DOG
* @subTypes Cat | Dog
*/
export type Pet = { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Pet {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Pet, R> = {
        [K in T as K['type']]: Handler<Extract<T, { type: K['type'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Pet,
        handler: MatchObj<Pet, R>
    ): R {
        if (union.type in handler) {
            return handler[union.type](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Pet,
        handler: Partial<MatchObj<Pet, R>>
    ): R | undefined {
        if (union.type in handler) {
            return handler[union.type]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {number}
     * @memberof PetBase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\bundled-pets-api.yml 1`] = `
"openapi: 3.0.3
info:
  version: 1.0.1
  title: some title
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
components:
  schemas:
    PetBase:
      type: object
      required:
        - id
        - name
        - type
      example:
        some: props
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
      discriminator:
        propertyName: type
    Dog:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            bark:
              type: string
            type:
              type: string
              x-const: DOG
              example: DOG
          required:
            - bark
            - type
    Cat:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            color:
              type: string
            type:
              type: string
              x-const: CAT
              example: CAT
          required:
            - color
            - type
    Pet:
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
      discriminator:
        propertyName: type
        mapping:
          DOG: '#/components/schemas/Dog'
          CAT: '#/components/schemas/Cat'
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from "./configuration";
import type {RequestArgs} from "./base";
import type {AxiosInstance, AxiosResponse} from 'axios';
import {RequiredError} from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {username: configuration.username, password: configuration.password};
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & { readonly [tag]: "UNKNOWN"; };
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\zod.ts 1`] = `
"import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const PetBase = z
  .object({ id: z.number().int(), type: z.string() })
  .passthrough();
const Cat = PetBase.merge(
  z.object({ color: z.string(), type: z.string() }).passthrough()
);
const Dog = PetBase.merge(
  z.object({ bark: z.string(), type: z.string() }).passthrough()
);
const Pet = z.discriminatedUnion("type", [Cat, Dog]);
const Pets = z.array(Pet);

export const schemas = {
  PetBase,
  Cat,
  Dog,
  Pet,
  Pets,
};
"
`;

exports[`Generate Integration ts test/specs/generic/api.yml: cleaned-test/specs/generic/api.yml 1`] = `
[
  {
    "content": ""use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.Pet = exports.CatBaseCatTypeEnums = exports.CatBaseCatTypeEnum = exports.Cat = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
var Cat;
(function (Cat) {
    /** All handler must return the same type*/
    function match(union, handler) {
        if (union.catType in handler) {
            return handler[union.catType](union);
        }
        return handler.onDefault(union);
    }
    Cat.match = match;
    /** All handler must return the same type*/
    function matchPartial(union, handler) {
        var _a, _b;
        if (union.catType in handler) {
            return (_a = handler[union.catType]) === null || _a === void 0 ? void 0 : _a.call(handler, union);
        }
        return (_b = handler.onDefault) === null || _b === void 0 ? void 0 : _b.call(handler, union);
    }
    Cat.matchPartial = matchPartial;
})(Cat || (exports.Cat = Cat = {}));
exports.CatBaseCatTypeEnum = {
    Seam: 'SEAM',
    Short: 'SHORT'
};
var CatBaseCatTypeEnums;
(function (CatBaseCatTypeEnums) {
    /** All handler must return the same type*/
    function match(enumValue, handler) {
        if (enumValue in handler) {
            return handler[enumValue](enumValue);
        }
        return handler.onDefault(enumValue);
    }
    CatBaseCatTypeEnums.match = match;
    /** All handler must return the same type*/
    function matchPartial(enumValue, handler) {
        var _a, _b;
        if (enumValue in handler) {
            return (_a = handler[enumValue]) === null || _a === void 0 ? void 0 : _a.call(handler, enumValue);
        }
        return (_b = handler.onDefault) === null || _b === void 0 ? void 0 : _b.call(handler, enumValue);
    }
    CatBaseCatTypeEnums.matchPartial = matchPartial;
})(CatBaseCatTypeEnums || (exports.CatBaseCatTypeEnums = CatBaseCatTypeEnums = {}));
var Pet;
(function (Pet) {
    /** All handler must return the same type*/
    function match(union, handler) {
        if (union.type in handler) {
            return handler[union.type](union);
        }
        return handler.onDefault(union);
    }
    Pet.match = match;
    /** All handler must return the same type*/
    function matchPartial(union, handler) {
        var _a, _b;
        if (union.type in handler) {
            return (_a = handler[union.type]) === null || _a === void 0 ? void 0 : _a.call(handler, union);
        }
        return (_b = handler.onDefault) === null || _b === void 0 ? void 0 : _b.call(handler, union);
    }
    Pet.matchPartial = matchPartial;
})(Pet || (exports.Pet = Pet = {}));
/**
 * DefaultApi - axios parameter creator
 * @export
 */
var DefaultApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get a Pet
         * @param {string} petId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: function (petId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'petId' is not null or undefined
                    (0, common_1.assertParamExists)('getPet', 'petId', petId);
                    localVarPath = "/pets/{petId}"
                        .replace("{".concat("petId", "}"), encodeURIComponent(String(petId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/pets";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
var DefaultApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get a Pet
         * @param {string} petId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: function (petId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPet(petId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DefaultApi.getPet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPets(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DefaultApi.listPets']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
var DefaultApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         *
         * @summary Get a Pet
         * @param {string} petId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: function (petId, options) {
            return localVarFp.getPet(petId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: function (options) {
            return localVarFp.listPets(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get a Pet
     * @param {string} petId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.getPet = function (petId, options) {
        var _this = this;
        return (0, exports.DefaultApiFp)(this.configuration).getPet(petId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.listPets = function (options) {
        var _this = this;
        return (0, exports.DefaultApiFp)(this.configuration).listPets(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DefaultApi;
}(base_1.BaseAPI));
exports.DefaultApi = DefaultApi;
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\api.js",
  },
  {
    "content": "/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

    
        /**
* @type Cat
* @export
* @discriminatedUnion Cat
* @discriminatorProperty catType
* @discriminatorValues SEAM | SHORT
* @subTypes Seam | ShortHair
*/
export type Cat = { catType: 'SEAM' } & Seam | { catType: 'SHORT' } & ShortHair | { catType: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Cat {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Cat, R> = {
        [K in T as K['catType']]: Handler<Extract<T, { type: K['catType'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Cat,
        handler: MatchObj<Cat, R>
    ): R {
        if (union.catType in handler) {
            return handler[union.catType](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Cat,
        handler: Partial<MatchObj<Cat, R>>
    ): R | undefined {
        if (union.catType in handler) {
            return handler[union.catType]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
    
        /**
 * 
 * @export
 * @interface CatBase
 */
export interface CatBase {
    /**
     * 
     * @type {string}
     * @memberof CatBase
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof CatBase
     * @discriminator catType
     */
    catType?: CatBaseCatTypeEnum;
}


export const CatBaseCatTypeEnum = {
    Seam: 'SEAM',
    Short: 'SHORT'
} as const;

export module CatBaseCatTypeEnums {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends CatBaseCatTypeEnum, R> = {
        [K in T as K]: Handler<Extract<T, K>, R>;
    }  & { onDefault: Handler<unknown, R> };
    /** All handler must return the same type*/
    export function match<R>(enumValue: CatBaseCatTypeEnum, handler: MatchObj<CatBaseCatTypeEnum, R>): R {
        if (enumValue in handler) {
            return handler[enumValue](enumValue as never);
        }
        return handler.onDefault(enumValue);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(enumValue: CatBaseCatTypeEnum, handler: Partial<MatchObj<CatBaseCatTypeEnum, R> >): R | undefined {
        if (enumValue in handler) {
            return handler[enumValue]?.(enumValue as never);
        }
        return handler.onDefault?.(enumValue);
    }
}

export type CatBaseCatTypeEnum = typeof CatBaseCatTypeEnum[keyof typeof CatBaseCatTypeEnum] | UNKNOWN_ENUM_VARIANT  ;

    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    bark: string;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}
    
        /**
 * 
 * @export
 * @interface GenericPet
 */
export interface GenericPet extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof GenericPet
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericPet
     */
    type: 'BIRD' | 'HAMSTER';
}
    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues BIRD | CAT | DOG | HAMSTER
* @subTypes GenericPet | Cat | Dog | GenericPet
*/
export type Pet = { type: 'BIRD' } & GenericPet | { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: 'HAMSTER' } & GenericPet | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Pet {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Pet, R> = {
        [K in T as K['type']]: Handler<Extract<T, { type: K['type'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Pet,
        handler: MatchObj<Pet, R>
    ): R {
        if (union.type in handler) {
            return handler[union.type](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Pet,
        handler: Partial<MatchObj<Pet, R>>
    ): R | undefined {
        if (union.type in handler) {
            return handler[union.type]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {number}
     * @memberof PetBase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
}
    
        /**
 * 
 * @export
 * @interface Seam
 */
export interface Seam extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     * @discriminator catType
     */
    catType: 'SEAM';
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    type: 'CAT';
}
    
        /**
 * 
 * @export
 * @interface ShortHair
 */
export interface ShortHair {
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     * @discriminator catType
     */
    catType: 'SHORT';
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    type: 'CAT';
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('getPet', 'petId', petId)
            const localVarPath = \`/pets/{petId}\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPet(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPet(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet(petId: string, options?: any): AxiosPromise<Pet> {
            return localVarFp.getPet(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get a Pet
     * @param {string} petId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPet(petId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPet(petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }
}



",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\api.ts",
  },
  {
    "content": ""use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.operationServerMap = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;
var axios_1 = require("axios");
exports.BASE_PATH = "http://localhost".replace(/\\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, axios) {
        if (basePath === void 0) { basePath = exports.BASE_PATH; }
        if (axios === void 0) { axios = axios_1.default; }
        var _a;
        this.basePath = basePath;
        this.axios = axios;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = (_a = configuration.basePath) !== null && _a !== void 0 ? _a : basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 *
 * @export
 */
exports.operationServerMap = {};
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\base.js",
  },
  {
    "content": "/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\base.ts",
  },
  {
    "content": "openapi: 3.0.3
info:
  version: 1.0.1
  title: some title
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
  /pets/{petId}:
    get:
      summary: Get a Pet
      operationId: getPet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
components:
  schemas:
    PetBase:
      title: PetBase
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
      discriminator:
        propertyName: type
    Dog:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            bark:
              type: string
            type:
              type: string
              x-const: DOG
              example: DOG
          required:
            - bark
            - type
    CatBase:
      allOf:
        - {}
        - title: CatBase
          properties:
            color:
              type: string
            catType:
              type: string
              enum:
                - SEAM
                - SHORT
              title: CatType
          required:
            - color
          discriminator:
            propertyName: catType
    Seam:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - title: Seam
          required:
            - color
            - catType
            - type
          discriminator:
            propertyName: catType
          properties:
            color:
              type: string
            catType:
              type: string
              title: CatType
              default: SEAM
              x-const: SEAM
              example: SEAM
            angryLevel:
              type: string
            type:
              type: string
              x-const: CAT
              example: CAT
    ShortHair:
      title: ShortHair
      required:
        - color
        - catType
        - type
      discriminator:
        propertyName: catType
      properties:
        color:
          type: string
        catType:
          type: string
          title: CatType
          default: SHORT
          x-const: SHORT
          example: SHORT
        angryLevel:
          type: string
        type:
          type: string
          x-const: CAT
          example: CAT
    Cat:
      oneOf:
        - $ref: '#/components/schemas/Seam'
        - $ref: '#/components/schemas/ShortHair'
      discriminator:
        propertyName: catType
        mapping:
          SEAM: '#/components/schemas/Seam'
          SHORT: '#/components/schemas/ShortHair'
    GenericPet:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - title: GenericPet
          properties:
            name:
              type: string
            type:
              type: string
              x-const:
                - BIRD
                - HAMSTER
              example: HAMSTER
          required:
            - type
    Pet:
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
        - $ref: '#/components/schemas/GenericPet'
      discriminator:
        propertyName: type
        mapping:
          DOG: '#/components/schemas/Dog'
          CAT: '#/components/schemas/Cat'
          BIRD: '#/components/schemas/GenericPet'
          HAMSTER: '#/components/schemas/GenericPet'
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\bundled-api.yml",
  },
  {
    "content": ""use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;
var base_1 = require("./base");
/**
 *
 * @export
 */
exports.DUMMY_BASE_URL = 'https://example.com';
/**
 *
 * @throws {RequiredError}
 * @export
 */
var assertParamExists = function (functionName, paramName, paramValue) {
    if (paramValue === null || paramValue === undefined) {
        throw new base_1.RequiredError(paramName, "Required parameter ".concat(paramName, " was null or undefined when calling ").concat(functionName, "."));
    }
};
exports.assertParamExists = assertParamExists;
/**
 *
 * @export
 */
var setApiKeyToObject = function (object, keyParamName, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var localVarApiKeyValue, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                    if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                    return [4 /*yield*/, configuration.apiKey(keyParamName)];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, configuration.apiKey];
                case 3:
                    _a = _b.sent();
                    _b.label = 4;
                case 4:
                    localVarApiKeyValue = _a;
                    object[keyParamName] = localVarApiKeyValue;
                    _b.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
};
exports.setApiKeyToObject = setApiKeyToObject;
/**
 *
 * @export
 */
var setBasicAuthToObject = function (object, configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
};
exports.setBasicAuthToObject = setBasicAuthToObject;
/**
 *
 * @export
 */
var setBearerAuthToObject = function (object, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var accessToken, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                    if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                    return [4 /*yield*/, configuration.accessToken()];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, configuration.accessToken];
                case 3:
                    _a = _b.sent();
                    _b.label = 4;
                case 4:
                    accessToken = _a;
                    object["Authorization"] = "Bearer " + accessToken;
                    _b.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
};
exports.setBearerAuthToObject = setBearerAuthToObject;
/**
 *
 * @export
 */
var setOAuthToObject = function (object, name, scopes, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var localVarAccessTokenValue, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                    if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                    return [4 /*yield*/, configuration.accessToken(name, scopes)];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, configuration.accessToken];
                case 3:
                    _a = _b.sent();
                    _b.label = 4;
                case 4:
                    localVarAccessTokenValue = _a;
                    object["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    _b.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
};
exports.setOAuthToObject = setOAuthToObject;
function setFlattenedQueryParams(urlSearchParams, parameter, key) {
    if (key === void 0) { key = ""; }
    if (parameter == null)
        return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            parameter.forEach(function (item) { return setFlattenedQueryParams(urlSearchParams, item, key); });
        }
        else {
            Object.keys(parameter).forEach(function (currentKey) {
                return setFlattenedQueryParams(urlSearchParams, parameter[currentKey], "".concat(key).concat(key !== '' ? '.' : '').concat(currentKey));
            });
        }
    }
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        }
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}
/**
 *
 * @export
 */
var setSearchParams = function (url) {
    var objects = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        objects[_i - 1] = arguments[_i];
    }
    var searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
};
exports.setSearchParams = setSearchParams;
/**
 *
 * @export
 */
var serializeDataIfNeeded = function (value, requestOptions, configuration) {
    var nonString = typeof value !== 'string';
    var needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
};
exports.serializeDataIfNeeded = serializeDataIfNeeded;
/**
 *
 * @export
 */
var toPathString = function (url) {
    return url.pathname + url.search + url.hash;
};
exports.toPathString = toPathString;
/**
 *
 * @export
 */
var createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {
    return function (axios, basePath) {
        var _a;
        if (axios === void 0) { axios = globalAxios; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        var axiosRequestArgs = __assign(__assign({}, axiosArgs.options), { url: (axios.defaults.baseURL ? '' : (_a = configuration === null || configuration === void 0 ? void 0 : configuration.basePath) !== null && _a !== void 0 ? _a : basePath) + axiosArgs.url });
        return axios.request(axiosRequestArgs);
    };
};
exports.createRequestFunction = createRequestFunction;
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\common.js",
  },
  {
    "content": "/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from "./configuration";
import type {RequestArgs} from "./base";
import type {AxiosInstance, AxiosResponse} from 'axios';
import {RequiredError} from "./base";


/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {username: configuration.username, password: configuration.password};
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & { readonly [tag]: "UNKNOWN"; };
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\common.ts",
  },
  {
    "content": ""use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
var Configuration = /** @class */ (function () {
    function Configuration(param) {
        if (param === void 0) { param = {}; }
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    Configuration.prototype.isJsonMime = function (mime) {
        var jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    };
    return Configuration;
}());
exports.Configuration = Configuration;
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\configuration.js",
  },
  {
    "content": "/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\configuration.ts",
  },
  {
    "content": ""use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./api.js"), exports);
__exportStar(require("./configuration.js"), exports);
__exportStar(require("./zod.js"), exports);
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\index.js",
  },
  {
    "content": "/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\index.ts",
  },
  {
    "content": ""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.schemas = void 0;
var zod_1 = require("zod");
var UNKNOWN_SCHEMA = zod_1.z.string().transform(function (e) { return e; });
var PetBase = zod_1.z
    .object({ id: zod_1.z.number().int(), type: zod_1.z.string() })
    .passthrough();
var Seam = PetBase.merge(zod_1.z
    .object({
    color: zod_1.z.string(),
    catType: zod_1.z.string().default("SEAM"),
    angryLevel: zod_1.z.string().optional(),
    type: zod_1.z.string(),
})
    .passthrough());
var ShortHair = zod_1.z
    .object({
    color: zod_1.z.string(),
    catType: zod_1.z.string().default("SHORT"),
    angryLevel: zod_1.z.string().optional(),
    type: zod_1.z.string(),
})
    .passthrough();
var Cat = zod_1.z.discriminatedUnion("catType", [Seam, ShortHair]);
var Dog = PetBase.merge(zod_1.z.object({ bark: zod_1.z.string(), type: zod_1.z.string() }).passthrough());
var GenericPet = PetBase.merge(zod_1.z.object({ name: zod_1.z.string().optional(), type: zod_1.z.string() }).passthrough());
var Pet = zod_1.z.discriminatedUnion("type", [Cat, Dog, GenericPet]);
var Pets = zod_1.z.array(Pet);
exports.schemas = {
    PetBase: PetBase,
    Seam: Seam,
    ShortHair: ShortHair,
    Cat: Cat,
    Dog: Dog,
    GenericPet: GenericPet,
    Pet: Pet,
    Pets: Pets,
};
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\zod.js",
  },
  {
    "content": "import { z } from "zod";
import { UNKNOWN_ENUM_VARIANT } from "./common.js";

const UNKNOWN_SCHEMA = z.string().transform((e) => e as UNKNOWN_ENUM_VARIANT);

const PetBase = z
  .object({ id: z.number().int(), type: z.string() })
  .passthrough();
const Seam = PetBase.merge(
  z
    .object({
      color: z.string(),
      catType: z.string().default("SEAM"),
      angryLevel: z.string().optional(),
      type: z.string(),
    })
    .passthrough()
);
const ShortHair = z
  .object({
    color: z.string(),
    catType: z.string().default("SHORT"),
    angryLevel: z.string().optional(),
    type: z.string(),
  })
  .passthrough();
const Cat = z.discriminatedUnion("catType", [Seam, ShortHair]);
const Dog = PetBase.merge(
  z.object({ bark: z.string(), type: z.string() }).passthrough()
);
const GenericPet = PetBase.merge(
  z.object({ name: z.string().optional(), type: z.string() }).passthrough()
);
const Pet = z.discriminatedUnion("type", [Cat, Dog, GenericPet]);
const Pets = z.array(Pet);

export const schemas = {
  PetBase,
  Seam,
  ShortHair,
  Cat,
  Dog,
  GenericPet,
  Pet,
  Pets,
};
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\zod.ts",
  },
]
`;
