// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common.js';
import type { RequestArgs } from './base.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base.js';

    
        /**
* @type Cat
* @export
* @discriminatedUnion Cat
* @discriminatorProperty catType
* @discriminatorValues SEAM | SHORT
* @subTypes Seam | ShortHair
*/
export type Cat = { catType: 'SEAM' } & Seam | { catType: 'SHORT' } & ShortHair | { catType: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Cat {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Cat, R> = {
        [K in T as K['catType']]: Handler<Extract<T, { type: K['catType'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Cat,
        handler: MatchObj<Cat, R>
    ): R {
        if (union.catType in handler) {
            return handler[union.catType](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Cat,
        handler: Partial<MatchObj<Cat, R>>
    ): R | undefined {
        if (union.catType in handler) {
            return handler[union.catType]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
    
        /**
 * 
 * @export
 * @interface CatBase
 */
export interface CatBase {
    /**
     * 
     * @type {string}
     * @memberof CatBase
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof CatBase
     * @discriminator catType
     */
    catType?: CatBaseCatTypeEnum;
}


export const CatBaseCatTypeEnum = {
    Seam: 'SEAM',
    Short: 'SHORT'
} as const;

export module CatBaseCatTypeEnums {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends CatBaseCatTypeEnum, R> = {
        [K in T as K]: Handler<Extract<T, K>, R>;
    }  & { onDefault: Handler<unknown, R> };
    /** All handler must return the same type*/
    export function match<R>(enumValue: CatBaseCatTypeEnum, handler: MatchObj<CatBaseCatTypeEnum, R>): R {
        if (enumValue in handler) {
            return handler[enumValue](enumValue as never);
        }
        return handler.onDefault(enumValue);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(enumValue: CatBaseCatTypeEnum, handler: Partial<MatchObj<CatBaseCatTypeEnum, R> >): R | undefined {
        if (enumValue in handler) {
            return handler[enumValue]?.(enumValue as never);
        }
        return handler.onDefault?.(enumValue);
    }
}

export type CatBaseCatTypeEnum = typeof CatBaseCatTypeEnum[keyof typeof CatBaseCatTypeEnum] | UNKNOWN_ENUM_VARIANT  ;

    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    bark: string;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}
    
        /**
 * 
 * @export
 * @interface GenericPet
 */
export interface GenericPet extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof GenericPet
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericPet
     */
    type: 'BIRD' | 'HAMSTER';
}
    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues BIRD | CAT | DOG | HAMSTER
* @subTypes GenericPet | Cat | Dog | GenericPet
*/
export type Pet = { type: 'BIRD' } & GenericPet | { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: 'HAMSTER' } & GenericPet | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Pet {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Pet, R> = {
        [K in T as K['type']]: Handler<Extract<T, { type: K['type'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Pet,
        handler: MatchObj<Pet, R>
    ): R {
        if (union.type in handler) {
            return handler[union.type](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Pet,
        handler: Partial<MatchObj<Pet, R>>
    ): R | undefined {
        if (union.type in handler) {
            return handler[union.type]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {number}
     * @memberof PetBase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
}
    
        /**
 * 
 * @export
 * @interface Seam
 */
export interface Seam extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     * @discriminator catType
     */
    catType: 'SEAM';
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    type: 'CAT';
}
    
        /**
 * 
 * @export
 * @interface ShortHair
 */
export interface ShortHair {
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     * @discriminator catType
     */
    catType: 'SHORT';
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    type: 'CAT';
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('getPet', 'petId', petId)
            const localVarPath = \`/pets/{petId}\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPet(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPet(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet(petId: string, options?: any): AxiosPromise<Pet> {
            return localVarFp.getPet(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get a Pet
     * @param {string} petId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPet(petId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPet(petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\bundled-api.yml 1`] = `
"openapi: 3.0.3
info:
  version: 1.0.1
  title: some title
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
  /pets/{petId}:
    get:
      summary: Get a Pet
      operationId: getPet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
components:
  schemas:
    PetBase:
      title: PetBase
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
          minimum: 1
          exclusiveMaximum: true
          format: int64
        type:
          type: string
      discriminator:
        propertyName: type
    Dog:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            bark:
              type: string
            type:
              type: string
              x-const: DOG
              example: DOG
          required:
            - bark
            - type
    CatBase:
      allOf:
        - {}
        - title: CatBase
          properties:
            color:
              type: string
            catType:
              type: string
              enum:
                - SEAM
                - SHORT
              title: CatType
          required:
            - color
          discriminator:
            propertyName: catType
    Seam:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - title: Seam
          required:
            - color
            - catType
            - type
          discriminator:
            propertyName: catType
          properties:
            color:
              type: string
            catType:
              type: string
              title: CatType
              default: SEAM
              maxLength: 3
              minLength: 1
              x-const: SEAM
              example: SEAM
            angryLevel:
              type: string
              pattern: \\w+
            type:
              type: string
              x-const: CAT
              example: CAT
    ShortHair:
      title: ShortHair
      required:
        - color
        - catType
        - type
      discriminator:
        propertyName: catType
      properties:
        color:
          type: string
        catType:
          type: string
          title: CatType
          default: SHORT
          x-const: SHORT
          example: SHORT
        angryLevel:
          type: string
        type:
          type: string
          x-const: CAT
          example: CAT
    Cat:
      oneOf:
        - $ref: '#/components/schemas/Seam'
        - $ref: '#/components/schemas/ShortHair'
      discriminator:
        propertyName: catType
        mapping:
          SEAM: '#/components/schemas/Seam'
          SHORT: '#/components/schemas/ShortHair'
    GenericPet:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - title: GenericPet
          properties:
            name:
              type: string
            type:
              type: string
              x-const:
                - BIRD
                - HAMSTER
              example: HAMSTER
          required:
            - type
    Pet:
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
        - $ref: '#/components/schemas/GenericPet'
      discriminator:
        propertyName: type
        mapping:
          DOG: '#/components/schemas/Dog'
          CAT: '#/components/schemas/Cat'
          BIRD: '#/components/schemas/GenericPet'
          HAMSTER: '#/components/schemas/GenericPet'
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from "./configuration.js";
import type {RequestArgs} from "./base.js";
import type {AxiosInstance, AxiosResponse} from 'axios';
import {RequiredError} from "./base.js";
import { z } from "zod";

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {username: configuration.username, password: configuration.password};
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & { readonly [tag]: "UNKNOWN"; };

export module ZodUnionMatch {
    // export type UNKNOWN = string & z.BRAND<"UNKNOWN">;
    export type Matcher = Record<string, z.ZodSchema>;

    export type Schemas<T extends Matcher> = T[keyof T];
    export type Discriminator<T extends Matcher> = keyof z.infer<T[keyof T]>;
    export function matcher<T extends Matcher>(discriminator: Discriminator<T>, matcher: T): Schemas<T> {
        return z
            .custom<T>()
            .transform((val) => {
                const result = matchSafe(val, matcher, discriminator);
                return { result, val };
            })
            .superRefine((prev, ctx) => {
                if (!prev.result.success) {
                    const discriminatorValue = prev.val?.[discriminator];
                    const discriminatorProp = JSON.stringify(discriminator);
                    const discriminatorWithValue = \`\${discriminatorProp}: \${discriminatorValue}\`;
                    const expected =
                        typeof discriminatorValue === "string" && discriminatorValue in matcher
                            ? "respective schema"
                            : \`{\${discriminatorProp}: \${Object.keys(matcher).join(" | ")}}\`;
                    ctx.addIssue({
                        code: "invalid_union",
                        unionErrors: [prev.result.error],
                        message: \`Invalid discriminated union: expected input to match with discriminator \${expected} but received discriminator: (\${
                            discriminatorWithValue ?? ""
                        }) \`,
                    });
                }
            })
            .transform((v) => (v.result.success ? v.result.data : v.val)) as unknown as Schemas<T>;
    }
    export function match<T extends Matcher>(union: z.infer<Schemas<T>>, matcher: T, discriminator: Discriminator<T>): T {
        const handlerKey = union[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher[handlerKey] as z.Schema).parse(union) : matcher.onDefault.parse(union);
    }
    export function matchSafe<T extends Matcher>(
        union: z.infer<Schemas<T>>,
        matcher: T,
        discriminator: Discriminator<T>
    ): z.SafeParseSuccess<Schemas<T>> | z.SafeParseError<z.ZodError> {
        const handlerKey = union?.[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher?.[handlerKey] as z.Schema)?.safeParse(union) : matcher.onDefault.safeParse(union);
    }
}
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";

"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\zod.ts 1`] = `
"import { z } from 'zod'
import * as zc from './common.js'

export module Schemas {
    export const PetBase = z.object({ id: z.number().int().min(1), type: z.string() });
    export const GenericPet = PetBase.merge(z.object({ name: z.string().optional(), type: z.enum(['BIRD', 'HAMSTER']) }));
    export const Dog = PetBase.merge(z.object({ bark: z.string(), type: z.literal('DOG') }));
    export const ShortHair = z.object({ color: z.string(), catType: z.literal('SHORT'), angryLevel: z.string().optional(), type: z.literal('CAT') });
    export const Seam = PetBase.merge(z.object({ color: z.string(), catType: z.literal('SEAM'), angryLevel: z.string().regex(/\\w+/).optional(), type: z.literal('CAT') }));
    export const Cat = zc.ZodUnionMatch.matcher("catType", { 'SEAM': Seam, 'SHORT': ShortHair, onDefault: z.object({ catType: z.string().brand("UNKNOWN") }) }).passthrough();
    export const Pet = zc.ZodUnionMatch.matcher("type", { 'DOG': Dog, 'BIRD': GenericPet, 'HAMSTER': GenericPet, onDefault: z.object({ type: z.string().brand("UNKNOWN") }) }).passthrough();
    export const Pets = z.array(Pet).max(100);

    export module Types {
        export type PetBase = z.infer<typeof Schemas.PetBase>;
        export type GenericPet = z.infer<typeof Schemas.GenericPet>;
        export type Dog = z.infer<typeof Schemas.Dog>;
        export type ShortHair = z.infer<typeof Schemas.ShortHair>;
        export type Seam = z.infer<typeof Schemas.Seam>;
        export type Cat = z.infer<typeof Schemas.Cat>;
        export type Pet = z.infer<typeof Schemas.Pet>;
        export type Pets = z.infer<typeof Schemas.Pets>;
    }

}
"
`;

exports[`Generate Integration all test/specs/generic/api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\generic\\zod-common.ts 1`] = `
"import { z } from 'zod'

export module ZodUnionMatch {
// export type UNKNOWN = string & z.BRAND<"UNKNOWN">;
    export type Matcher = Record<string, z.ZodSchema>;

    export type Schemas<T extends Matcher> = T[keyof T];
    export type Discriminator<T extends Matcher> = keyof z.infer<T[keyof T]>;

    export function matcher<T extends Matcher>(discriminator: Discriminator<T>, matcher: T): Schemas<T> {
        return z
            .custom<T>()
            .transform((val) => {
                const result = matchSafe(val, matcher, discriminator);
                return {result, val};
            })
            .superRefine((prev, ctx) => {
                if (!prev.result.success) {
                    const discriminatorValue = prev.val?.[discriminator];
                    const discriminatorProp = JSON.stringify(discriminator);
                    const discriminatorWithValue = \`\${discriminatorProp}: \${discriminatorValue}\`;
                    const expected =
                        typeof discriminatorValue === "string" && discriminatorValue in matcher
                            ? "respective schema"
                            : \`{\${discriminatorProp}: \${Object.keys(matcher).join(" | ")}}\`;
                    ctx.addIssue({
                        code: "invalid_union",
                        unionErrors: [prev.result.error],
                        message: \`Invalid discriminated union: expected input to match with discriminator \${expected} but received discriminator: (\${
                            discriminatorWithValue ?? ""
                        }) \`,
                    });
                }
            })
            .transform((v) => (v.result.success ? v.result.data : v.val)) as unknown as Schemas<T>;
    }

    export function match<T extends Matcher>(union: z.infer<Schemas<T>>, matcher: T, discriminator: Discriminator<T>): T {
        const handlerKey = union[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher[handlerKey] as z.Schema).parse(union) : matcher.onDefault.parse(union);
    }

    export function matchSafe<T extends Matcher>(
        union: z.infer<Schemas<T>>,
        matcher: T,
        discriminator: Discriminator<T>
    ): z.SafeParseSuccess<Schemas<T>> | z.SafeParseError<z.ZodError> {
        const handlerKey = union?.[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher?.[handlerKey] as z.Schema)?.safeParse(union) : matcher.onDefault.safeParse(union);
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common.js';
import type { RequestArgs } from './base.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base.js';

    
        /**
 * 
 * @export
 * @interface Cat
 */
export interface Cat extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    breed?: CatBreedEnum;
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    type: 'CAT';
}


export const CatBreedEnum = {
    A: 'CAT_A',
    B: 'CAT_B'
} as const;

export module CatBreedEnums {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends CatBreedEnum, R> = {
        [K in T as K]: Handler<Extract<T, K>, R>;
    }  & { onDefault: Handler<unknown, R> };
    /** All handler must return the same type*/
    export function match<R>(enumValue: CatBreedEnum, handler: MatchObj<CatBreedEnum, R>): R {
        if (enumValue in handler) {
            return handler[enumValue](enumValue as never);
        }
        return handler.onDefault(enumValue);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(enumValue: CatBreedEnum, handler: Partial<MatchObj<CatBreedEnum, R> >): R | undefined {
        if (enumValue in handler) {
            return handler[enumValue]?.(enumValue as never);
        }
        return handler.onDefault?.(enumValue);
    }
}

export type CatBreedEnum = typeof CatBreedEnum[keyof typeof CatBreedEnum] | UNKNOWN_ENUM_VARIANT  ;

    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {boolean}
     * @memberof Dog
     */
    fluffy?: boolean;
    /**
     * 
     * @type {DogEnum}
     * @memberof Dog
     */
    breed?: DogEnum;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}


    /**
 * 
 * @export
 * @enum {string}
 */

export const DogEnum = {
    A: 'DOG_A',
    B: 'DOG_B'
} as const;

export type DogEnum = typeof DogEnum[keyof typeof DogEnum]  | UNKNOWN_ENUM_VARIANT;


    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues CAT | DOG
* @subTypes Cat | Dog
*/
export type Pet = { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Pet {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Pet, R> = {
        [K in T as K['type']]: Handler<Extract<T, { type: K['type'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Pet,
        handler: MatchObj<Pet, R>
    ): R {
        if (union.type in handler) {
            return handler[union.type](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Pet,
        handler: Partial<MatchObj<Pet, R>>
    ): R | undefined {
        if (union.type in handler) {
            return handler[union.type]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     */
    name?: string;
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/v1/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPets(options?: any): AxiosPromise<Pet> {
            return localVarFp.getPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://https:/".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\bundled-pets-api.yml 1`] = `
"openapi: 3.0.3
info:
  title: My service
  description: My service
  version: 1.0.0
servers:
  - url: https://
paths:
  /v1/pets:
    get:
      summary: Get pets
      operationId: getPets
      responses:
        '200':
          description: Ok response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
components:
  schemas:
    PetBase:
      type: object
      discriminator:
        propertyName: type
      required:
        - type
      properties:
        type:
          type: string
        name:
          type: string
    DogEnum:
      type: string
      enum:
        - DOG_A
        - DOG_B
    Dog:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            fluffy:
              type: boolean
            breed:
              $ref: '#/components/schemas/DogEnum'
            type:
              type: string
              x-const: DOG
              example: DOG
          required:
            - type
    Cat:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            breed:
              type: string
              enum:
                - CAT_A
                - CAT_B
            type:
              type: string
              x-const: CAT
              example: CAT
          required:
            - type
    Pet:
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
      discriminator:
        propertyName: type
        mapping:
          DOG: '#/components/schemas/Dog'
          CAT: '#/components/schemas/Cat'
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from "./configuration.js";
import type {RequestArgs} from "./base.js";
import type {AxiosInstance, AxiosResponse} from 'axios';
import {RequiredError} from "./base.js";
import { z } from "zod";

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {username: configuration.username, password: configuration.password};
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & { readonly [tag]: "UNKNOWN"; };

export module ZodUnionMatch {
    // export type UNKNOWN = string & z.BRAND<"UNKNOWN">;
    export type Matcher = Record<string, z.ZodSchema>;

    export type Schemas<T extends Matcher> = T[keyof T];
    export type Discriminator<T extends Matcher> = keyof z.infer<T[keyof T]>;
    export function matcher<T extends Matcher>(discriminator: Discriminator<T>, matcher: T): Schemas<T> {
        return z
            .custom<T>()
            .transform((val) => {
                const result = matchSafe(val, matcher, discriminator);
                return { result, val };
            })
            .superRefine((prev, ctx) => {
                if (!prev.result.success) {
                    const discriminatorValue = prev.val?.[discriminator];
                    const discriminatorProp = JSON.stringify(discriminator);
                    const discriminatorWithValue = \`\${discriminatorProp}: \${discriminatorValue}\`;
                    const expected =
                        typeof discriminatorValue === "string" && discriminatorValue in matcher
                            ? "respective schema"
                            : \`{\${discriminatorProp}: \${Object.keys(matcher).join(" | ")}}\`;
                    ctx.addIssue({
                        code: "invalid_union",
                        unionErrors: [prev.result.error],
                        message: \`Invalid discriminated union: expected input to match with discriminator \${expected} but received discriminator: (\${
                            discriminatorWithValue ?? ""
                        }) \`,
                    });
                }
            })
            .transform((v) => (v.result.success ? v.result.data : v.val)) as unknown as Schemas<T>;
    }
    export function match<T extends Matcher>(union: z.infer<Schemas<T>>, matcher: T, discriminator: Discriminator<T>): T {
        const handlerKey = union[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher[handlerKey] as z.Schema).parse(union) : matcher.onDefault.parse(union);
    }
    export function matchSafe<T extends Matcher>(
        union: z.infer<Schemas<T>>,
        matcher: T,
        discriminator: Discriminator<T>
    ): z.SafeParseSuccess<Schemas<T>> | z.SafeParseError<z.ZodError> {
        const handlerKey = union?.[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher?.[handlerKey] as z.Schema)?.safeParse(union) : matcher.onDefault.safeParse(union);
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * My service
 * My service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";

"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\zod.ts 1`] = `
"import { z } from 'zod'
import * as zc from './common.js'

export module Schemas {
    export const PetBase = z.object({ type: z.string(), name: z.string().optional() });
    export const DogEnum = z.enum(['DOG_A', 'DOG_B']);
    export const Dog = PetBase.merge(z.object({ fluffy: z.boolean().optional(), dogEnum: DogEnum, type: z.literal('DOG') }));
    export const Cat = PetBase.merge(z.object({ breed: z.enum(['CAT_A', 'CAT_B']).optional(), type: z.literal('CAT') }));
    export const Pet = zc.ZodUnionMatch.matcher("type", { 'CAT': Cat, 'DOG': Dog, onDefault: z.object({ type: z.string().brand("UNKNOWN") }) }).passthrough();

    export module Types {
        export type PetBase = z.infer<typeof Schemas.PetBase>;
        export type DogEnum = z.infer<typeof Schemas.DogEnum>;
        export type Dog = z.infer<typeof Schemas.Dog>;
        export type Cat = z.infer<typeof Schemas.Cat>;
        export type Pet = z.infer<typeof Schemas.Pet>;
    }

}
"
`;

exports[`Generate Integration all test/specs/pets-modular/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular\\zod-common.ts 1`] = `
"import { z } from 'zod'

export module ZodUnionMatch {
// export type UNKNOWN = string & z.BRAND<"UNKNOWN">;
    export type Matcher = Record<string, z.ZodSchema>;

    export type Schemas<T extends Matcher> = T[keyof T];
    export type Discriminator<T extends Matcher> = keyof z.infer<T[keyof T]>;

    export function matcher<T extends Matcher>(discriminator: Discriminator<T>, matcher: T): Schemas<T> {
        return z
            .custom<T>()
            .transform((val) => {
                const result = matchSafe(val, matcher, discriminator);
                return {result, val};
            })
            .superRefine((prev, ctx) => {
                if (!prev.result.success) {
                    const discriminatorValue = prev.val?.[discriminator];
                    const discriminatorProp = JSON.stringify(discriminator);
                    const discriminatorWithValue = \`\${discriminatorProp}: \${discriminatorValue}\`;
                    const expected =
                        typeof discriminatorValue === "string" && discriminatorValue in matcher
                            ? "respective schema"
                            : \`{\${discriminatorProp}: \${Object.keys(matcher).join(" | ")}}\`;
                    ctx.addIssue({
                        code: "invalid_union",
                        unionErrors: [prev.result.error],
                        message: \`Invalid discriminated union: expected input to match with discriminator \${expected} but received discriminator: (\${
                            discriminatorWithValue ?? ""
                        }) \`,
                    });
                }
            })
            .transform((v) => (v.result.success ? v.result.data : v.val)) as unknown as Schemas<T>;
    }

    export function match<T extends Matcher>(union: z.infer<Schemas<T>>, matcher: T, discriminator: Discriminator<T>): T {
        const handlerKey = union[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher[handlerKey] as z.Schema).parse(union) : matcher.onDefault.parse(union);
    }

    export function matchSafe<T extends Matcher>(
        union: z.infer<Schemas<T>>,
        matcher: T,
        discriminator: Discriminator<T>
    ): z.SafeParseSuccess<Schemas<T>> | z.SafeParseError<z.ZodError> {
        const handlerKey = union?.[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher?.[handlerKey] as z.Schema)?.safeParse(union) : matcher.onDefault.safeParse(union);
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common.js';
import type { RequestArgs } from './base.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base.js';

    
        /**
 * 
 * @export
 * @interface Ball
 */
export interface Ball {
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    kind: 'BALL';
    /**
     * 
     * @type {FluffLevel}
     * @memberof Ball
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof Ball
     */
    targetGroup?: string;
}


    
        /**
 * 
 * @export
 * @interface Color
 */
export interface Color {
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    untitledProp?: string;
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    colorId?: string;
    /**
     * 
     * @type {SchemaUntitled}
     * @memberof Color
     */
    untitled?: SchemaUntitled;
}
    
        /**
 * 
 * @export
 * @interface ComponentsSchemasToy
 */
export interface ComponentsSchemasToy {
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    kind: string;
    /**
     * 
     * @type {FluffLevel}
     * @memberof ComponentsSchemasToy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    targetGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    someEnum?: ComponentsSchemasToySomeEnumEnum;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    subId?: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentsSchemasToy
     */
    name?: string;
    /**
     * 
     * @type {Color}
     * @memberof ComponentsSchemasToy
     */
    color?: Color;
    /**
     * 
     * @type {PetToy}
     * @memberof ComponentsSchemasToy
     */
    relates?: PetToy;
}


export const ComponentsSchemasToySomeEnumEnum = {
    Foo: 'FOO',
    Bar: 'BAR'
} as const;

export module ComponentsSchemasToySomeEnumEnums {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends ComponentsSchemasToySomeEnumEnum, R> = {
        [K in T as K]: Handler<Extract<T, K>, R>;
    }  & { onDefault: Handler<unknown, R> };
    /** All handler must return the same type*/
    export function match<R>(enumValue: ComponentsSchemasToySomeEnumEnum, handler: MatchObj<ComponentsSchemasToySomeEnumEnum, R>): R {
        if (enumValue in handler) {
            return handler[enumValue](enumValue as never);
        }
        return handler.onDefault(enumValue);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(enumValue: ComponentsSchemasToySomeEnumEnum, handler: Partial<MatchObj<ComponentsSchemasToySomeEnumEnum, R> >): R | undefined {
        if (enumValue in handler) {
            return handler[enumValue]?.(enumValue as never);
        }
        return handler.onDefault?.(enumValue);
    }
}

export type ComponentsSchemasToySomeEnumEnum = typeof ComponentsSchemasToySomeEnumEnum[keyof typeof ComponentsSchemasToySomeEnumEnum] | UNKNOWN_ENUM_VARIANT  ;

    /**
 * 
 * @export
 * @enum {string}
 */

export const FluffLevel = {
    A: 'A',
    B: 'B',
    C: 'C'
} as const;

export type FluffLevel = typeof FluffLevel[keyof typeof FluffLevel]  | UNKNOWN_ENUM_VARIANT;


    
        /**
 * 
 * @export
 * @interface FluffyTeddy
 */
export interface FluffyTeddy {
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    kind: 'TEDDY';
    /**
     * 
     * @type {FluffLevel}
     * @memberof FluffyTeddy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof FluffyTeddy
     */
    targetGroup?: string;
}


    
        /**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * 
     * @type {SchemaTitled}
     * @memberof ModelError
     */
    titledSchema?: SchemaTitled;
}
    
        /**
 * 
 * @export
 * @interface Pet
 */
export interface Pet {
    /**
     * 
     * @type {number}
     * @memberof Pet
     */
    id: number;
    /**
     * 
     * @type {ComponentsSchemasToy}
     * @memberof Pet
     */
    toy?: ComponentsSchemasToy;
    /**
     * 
     * @type {SchemasToy}
     * @memberof Pet
     */
    leastFavToy?: SchemasToy;
    /**
     * 
     * @type {FluffLevel}
     * @memberof Pet
     */
    favFluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    tag?: string;
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    name: string;
}


    
        /**
* @type PetToy
* @export
* @discriminatedUnion PetToy
* @discriminatorProperty kind
* @discriminatorValues BALL | TEDDY
* @subTypes Ball | FluffyTeddy
*/
export type PetToy = { kind: 'BALL' } & Ball | { kind: 'TEDDY' } & FluffyTeddy | { kind: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module PetToy {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends PetToy, R> = {
        [K in T as K['kind']]: Handler<Extract<T, { type: K['kind'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: PetToy,
        handler: MatchObj<PetToy, R>
    ): R {
        if (union.kind in handler) {
            return handler[union.kind](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: PetToy,
        handler: Partial<MatchObj<PetToy, R>>
    ): R | undefined {
        if (union.kind in handler) {
            return handler[union.kind]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
    
        /**
 * 
 * @export
 * @interface SchemaTitled
 */
export interface SchemaTitled {
    /**
     * 
     * @type {string}
     * @memberof SchemaTitled
     */
    titledProp?: string;
}
    
        /**
 * 
 * @export
 * @interface SchemaUntitled
 */
export interface SchemaUntitled {
    /**
     * 
     * @type {string}
     * @memberof SchemaUntitled
     */
    untitledProp?: string;
}
    
        /**
 * 
 * @export
 * @interface SchemasToy
 */
export interface SchemasToy {
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    kind: string;
    /**
     * 
     * @type {FluffLevel}
     * @memberof SchemasToy
     */
    fluffLevel?: FluffLevel;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    targetGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasToy
     */
    someEnum?: SchemasToySomeEnumEnum;
}


export const SchemasToySomeEnumEnum = {
    Foo: 'FOO',
    Bar: 'BAR'
} as const;

export module SchemasToySomeEnumEnums {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends SchemasToySomeEnumEnum, R> = {
        [K in T as K]: Handler<Extract<T, K>, R>;
    }  & { onDefault: Handler<unknown, R> };
    /** All handler must return the same type*/
    export function match<R>(enumValue: SchemasToySomeEnumEnum, handler: MatchObj<SchemasToySomeEnumEnum, R>): R {
        if (enumValue in handler) {
            return handler[enumValue](enumValue as never);
        }
        return handler.onDefault(enumValue);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(enumValue: SchemasToySomeEnumEnum, handler: Partial<MatchObj<SchemasToySomeEnumEnum, R> >): R | undefined {
        if (enumValue in handler) {
            return handler[enumValue]?.(enumValue as never);
        }
        return handler.onDefault?.(enumValue);
    }
}

export type SchemasToySomeEnumEnum = typeof SchemasToySomeEnumEnum[keyof typeof SchemasToySomeEnumEnum] | UNKNOWN_ENUM_VARIANT  ;




/**
 * PetsApi - axios parameter creator
 * @export
 */
export const PetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('listPets', 'petId', petId)
            const localVarPath = \`/pets\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('showPetById', 'petId', petId)
            const localVarPath = \`/pets/{petId}\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PetsApi - functional programming interface
 * @export
 */
export const PetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.createPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showPetById(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showPetById(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PetsApi.showPetById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PetsApi - factory interface
 * @export
 */
export const PetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PetsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets(options?: any): AxiosPromise<void> {
            return localVarFp.createPets(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(petId: string, options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById(petId: string, options?: any): AxiosPromise<Pet> {
            return localVarFp.showPetById(petId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PetsApi - object-oriented interface
 * @export
 * @class PetsApi
 * @extends {BaseAPI}
 */
export class PetsApi extends BaseAPI {
    /**
     * 
     * @summary Create a pet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public createPets(options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).createPets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {string} petId The id of the pet to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public listPets(petId: string, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).listPets(petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Info for a specific pet
     * @param {string} petId The id of the pet to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public showPetById(petId: string, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).showPetById(petId, options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://petstore.swagger.io/v1".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\bundled-petstore-api.yml 1`] = `
"openapi: 3.0.3
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/PathPetId'
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          $ref: '#/components/responses/Default'
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          $ref: '#/components/responses/Default'
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/PathPetId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          $ref: '#/components/responses/Default'
components:
  parameters:
    PathPetId:
      name: petId
      in: path
      required: true
      description: The id of the pet to retrieve
      schema:
        type: string
  schemas:
    HttpErrorCode:
      type: integer
      format: int32
    schema-titled:
      title: Titled Schema
      properties:
        titledProp:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: '#/components/schemas/HttpErrorCode'
        message:
          type: string
        titledSchema:
          $ref: '#/components/schemas/schema-titled'
    FluffLevel:
      type: string
      enum:
        - A
        - B
        - C
    schemas-Toy:
      title: Toy
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        targetGroup:
          type: string
          x-extensible-enum:
            - PETS
            - CHILDREN
          default: CHILDREN
        someEnum:
          type: string
          enum:
            - FOO
            - BAR
          title: FooBar
      required:
        - id
        - price
        - kind
    schema-untitled:
      properties:
        untitledProp:
          type: string
    Color:
      type: object
      properties:
        untitledProp:
          type: string
        colorId:
          type: string
        untitled:
          $ref: '#/components/schemas/schema-untitled'
    targetGroup:
      type: string
      x-extensible-enum:
        - PETS
        - CHILDREN
      default: CHILDREN
    Ball:
      required:
        - id
        - price
        - kind
      title: Ball
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
          x-const: BALL
          example: BALL
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        targetGroup:
          type: string
          x-extensible-enum:
            - PETS
            - CHILDREN
          default: CHILDREN
    FluffyTeddy:
      required:
        - id
        - price
        - kind
      title: Teddy
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
          x-const: TEDDY
          example: TEDDY
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        targetGroup:
          type: string
          x-extensible-enum:
            - PETS
            - CHILDREN
          default: CHILDREN
    PetToy:
      oneOf:
        - $ref: '#/components/schemas/Ball'
        - $ref: '#/components/schemas/FluffyTeddy'
      discriminator:
        propertyName: kind
        mapping:
          BALL: '#/components/schemas/Ball'
          TEDDY: '#/components/schemas/FluffyTeddy'
    components-schemas-Toy:
      title: Toy
      required:
        - id
        - kind
        - price
        - string
      properties:
        id:
          type: string
        price:
          type: string
        kind:
          type: string
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        targetGroup:
          $ref: '#/components/schemas/targetGroup'
        someEnum:
          type: string
          enum:
            - FOO
            - BAR
          title: FooBar
        subId:
          type: string
        name:
          type: string
        color:
          $ref: '#/components/schemas/Color'
        relates:
          $ref: '#/components/schemas/PetToy'
    Pet:
      type: object
      required:
        - id
        - name
      example:
        foo: ''
        bar: 1234
        foobar: true
      properties:
        id:
          type: integer
          format: int64
        toy:
          $ref: '#/components/schemas/components-schemas-Toy'
        leastFavToy:
          $ref: '#/components/schemas/schemas-Toy'
        favFluffLevel:
          $ref: '#/components/schemas/FluffLevel'
        tag:
          type: string
          example:
            description: default string example
            value: some string
        name:
          type: string
          example:
            description: default string example
            value: some string
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
  responses:
    Default:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from "./configuration.js";
import type {RequestArgs} from "./base.js";
import type {AxiosInstance, AxiosResponse} from 'axios';
import {RequiredError} from "./base.js";
import { z } from "zod";

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {username: configuration.username, password: configuration.password};
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & { readonly [tag]: "UNKNOWN"; };

export module ZodUnionMatch {
    // export type UNKNOWN = string & z.BRAND<"UNKNOWN">;
    export type Matcher = Record<string, z.ZodSchema>;

    export type Schemas<T extends Matcher> = T[keyof T];
    export type Discriminator<T extends Matcher> = keyof z.infer<T[keyof T]>;
    export function matcher<T extends Matcher>(discriminator: Discriminator<T>, matcher: T): Schemas<T> {
        return z
            .custom<T>()
            .transform((val) => {
                const result = matchSafe(val, matcher, discriminator);
                return { result, val };
            })
            .superRefine((prev, ctx) => {
                if (!prev.result.success) {
                    const discriminatorValue = prev.val?.[discriminator];
                    const discriminatorProp = JSON.stringify(discriminator);
                    const discriminatorWithValue = \`\${discriminatorProp}: \${discriminatorValue}\`;
                    const expected =
                        typeof discriminatorValue === "string" && discriminatorValue in matcher
                            ? "respective schema"
                            : \`{\${discriminatorProp}: \${Object.keys(matcher).join(" | ")}}\`;
                    ctx.addIssue({
                        code: "invalid_union",
                        unionErrors: [prev.result.error],
                        message: \`Invalid discriminated union: expected input to match with discriminator \${expected} but received discriminator: (\${
                            discriminatorWithValue ?? ""
                        }) \`,
                    });
                }
            })
            .transform((v) => (v.result.success ? v.result.data : v.val)) as unknown as Schemas<T>;
    }
    export function match<T extends Matcher>(union: z.infer<Schemas<T>>, matcher: T, discriminator: Discriminator<T>): T {
        const handlerKey = union[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher[handlerKey] as z.Schema).parse(union) : matcher.onDefault.parse(union);
    }
    export function matchSafe<T extends Matcher>(
        union: z.infer<Schemas<T>>,
        matcher: T,
        discriminator: Discriminator<T>
    ): z.SafeParseSuccess<Schemas<T>> | z.SafeParseError<z.ZodError> {
        const handlerKey = union?.[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher?.[handlerKey] as z.Schema)?.safeParse(union) : matcher.onDefault.safeParse(union);
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";

"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\zod.ts 1`] = `
"import { z } from 'zod'
import * as zc from './common.js'

export module Schemas {
    export const FluffLevel = z.enum(['A', 'B', 'C']);
    export const SchemasToy = z.object({ id: z.string(), price: z.string(), kind: z.string(), fluffLevel: FluffLevel, targetGroup: z.string().optional(), someEnum: z.enum(['FOO', 'BAR']).optional() });
    export const FluffyTeddy = z.object({ id: z.string(), price: z.string(), kind: z.literal('TEDDY'), fluffLevel: FluffLevel, targetGroup: z.string().optional() });
    export const Ball = z.object({ id: z.string(), price: z.string(), kind: z.literal('BALL'), fluffLevel: FluffLevel, targetGroup: z.string().optional() });
    export const PetToy = zc.ZodUnionMatch.matcher("kind", { 'BALL': Ball, 'TEDDY': FluffyTeddy, onDefault: z.object({ kind: z.string().brand("UNKNOWN") }) }).passthrough();
    export const SchemaUntitled = z.object({ untitledProp: z.string().optional() });
    export const Color = z.object({ untitledProp: z.string().optional(), colorId: z.string().optional(), schemaUntitled: SchemaUntitled });
    export const TargetGroup = z.string();
    export const ComponentsSchemasToy = z.object({ id: z.string(), price: z.string(), kind: z.string(), fluffLevel: FluffLevel, targetGroup: TargetGroup, someEnum: z.enum(['FOO', 'BAR']).optional(), subId: z.string().optional(), name: z.string().optional(), color: Color, petToy: PetToy });
    export const Pet = z.object({ id: z.number().int(), componentsSchemasToy: ComponentsSchemasToy, schemasToy: SchemasToy, fluffLevel: FluffLevel, tag: z.string().optional(), name: z.string() });
    export const Pets = z.array(Pet).max(100);
    export const SchemaTitled = z.object({ titledProp: z.string().optional() });
    export const HttpErrorCode = z.number().int();
    export const Error = z.object({ httpErrorCode: HttpErrorCode, message: z.string(), schemaTitled: SchemaTitled });

    export module Types {
        export type FluffLevel = z.infer<typeof Schemas.FluffLevel>;
        export type SchemasToy = z.infer<typeof Schemas.SchemasToy>;
        export type FluffyTeddy = z.infer<typeof Schemas.FluffyTeddy>;
        export type Ball = z.infer<typeof Schemas.Ball>;
        export type PetToy = z.infer<typeof Schemas.PetToy>;
        export type SchemaUntitled = z.infer<typeof Schemas.SchemaUntitled>;
        export type Color = z.infer<typeof Schemas.Color>;
        export type TargetGroup = z.infer<typeof Schemas.TargetGroup>;
        export type ComponentsSchemasToy = z.infer<typeof Schemas.ComponentsSchemasToy>;
        export type Pet = z.infer<typeof Schemas.Pet>;
        export type Pets = z.infer<typeof Schemas.Pets>;
        export type SchemaTitled = z.infer<typeof Schemas.SchemaTitled>;
        export type HttpErrorCode = z.infer<typeof Schemas.HttpErrorCode>;
        export type Error = z.infer<typeof Schemas.Error>;
    }

}
"
`;

exports[`Generate Integration all test/specs/pets-modular-complex/petstore-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-modular-complex\\zod-common.ts 1`] = `
"import { z } from 'zod'

export module ZodUnionMatch {
// export type UNKNOWN = string & z.BRAND<"UNKNOWN">;
    export type Matcher = Record<string, z.ZodSchema>;

    export type Schemas<T extends Matcher> = T[keyof T];
    export type Discriminator<T extends Matcher> = keyof z.infer<T[keyof T]>;

    export function matcher<T extends Matcher>(discriminator: Discriminator<T>, matcher: T): Schemas<T> {
        return z
            .custom<T>()
            .transform((val) => {
                const result = matchSafe(val, matcher, discriminator);
                return {result, val};
            })
            .superRefine((prev, ctx) => {
                if (!prev.result.success) {
                    const discriminatorValue = prev.val?.[discriminator];
                    const discriminatorProp = JSON.stringify(discriminator);
                    const discriminatorWithValue = \`\${discriminatorProp}: \${discriminatorValue}\`;
                    const expected =
                        typeof discriminatorValue === "string" && discriminatorValue in matcher
                            ? "respective schema"
                            : \`{\${discriminatorProp}: \${Object.keys(matcher).join(" | ")}}\`;
                    ctx.addIssue({
                        code: "invalid_union",
                        unionErrors: [prev.result.error],
                        message: \`Invalid discriminated union: expected input to match with discriminator \${expected} but received discriminator: (\${
                            discriminatorWithValue ?? ""
                        }) \`,
                    });
                }
            })
            .transform((v) => (v.result.success ? v.result.data : v.val)) as unknown as Schemas<T>;
    }

    export function match<T extends Matcher>(union: z.infer<Schemas<T>>, matcher: T, discriminator: Discriminator<T>): T {
        const handlerKey = union[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher[handlerKey] as z.Schema).parse(union) : matcher.onDefault.parse(union);
    }

    export function matchSafe<T extends Matcher>(
        union: z.infer<Schemas<T>>,
        matcher: T,
        discriminator: Discriminator<T>
    ): z.SafeParseSuccess<Schemas<T>> | z.SafeParseError<z.ZodError> {
        const handlerKey = union?.[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher?.[handlerKey] as z.Schema)?.safeParse(union) : matcher.onDefault.safeParse(union);
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\api.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common.js';
import type { RequestArgs } from './base.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base.js';

    
        /**
 * 
 * @export
 * @interface Cat
 */
export interface Cat extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Cat
     */
    type: 'CAT';
}
    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    bark: string;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}
    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues CAT | DOG
* @subTypes Cat | Dog
*/
export type Pet = { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Pet {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Pet, R> = {
        [K in T as K['type']]: Handler<Extract<T, { type: K['type'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Pet,
        handler: MatchObj<Pet, R>
    ): R {
        if (union.type in handler) {
            return handler[union.type](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Pet,
        handler: Partial<MatchObj<Pet, R>>
    ): R | undefined {
        if (union.type in handler) {
            return handler[union.type]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {number}
     * @memberof PetBase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }
}



"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\base.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\bundled-pets-api.yml 1`] = `
"openapi: 3.0.3
info:
  version: 1.0.1
  title: some title
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
components:
  schemas:
    PetBase:
      type: object
      required:
        - id
        - name
        - type
      example:
        some: props
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
      discriminator:
        propertyName: type
    Dog:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            bark:
              type: string
            type:
              type: string
              x-const: DOG
              example: DOG
          required:
            - bark
            - type
    Cat:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            color:
              type: string
            type:
              type: string
              x-const: CAT
              example: CAT
          required:
            - color
            - type
    Pet:
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
      discriminator:
        propertyName: type
        mapping:
          DOG: '#/components/schemas/Dog'
          CAT: '#/components/schemas/Cat'
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\common.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from "./configuration.js";
import type {RequestArgs} from "./base.js";
import type {AxiosInstance, AxiosResponse} from 'axios';
import {RequiredError} from "./base.js";
import { z } from "zod";

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {username: configuration.username, password: configuration.password};
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & { readonly [tag]: "UNKNOWN"; };

export module ZodUnionMatch {
    // export type UNKNOWN = string & z.BRAND<"UNKNOWN">;
    export type Matcher = Record<string, z.ZodSchema>;

    export type Schemas<T extends Matcher> = T[keyof T];
    export type Discriminator<T extends Matcher> = keyof z.infer<T[keyof T]>;
    export function matcher<T extends Matcher>(discriminator: Discriminator<T>, matcher: T): Schemas<T> {
        return z
            .custom<T>()
            .transform((val) => {
                const result = matchSafe(val, matcher, discriminator);
                return { result, val };
            })
            .superRefine((prev, ctx) => {
                if (!prev.result.success) {
                    const discriminatorValue = prev.val?.[discriminator];
                    const discriminatorProp = JSON.stringify(discriminator);
                    const discriminatorWithValue = \`\${discriminatorProp}: \${discriminatorValue}\`;
                    const expected =
                        typeof discriminatorValue === "string" && discriminatorValue in matcher
                            ? "respective schema"
                            : \`{\${discriminatorProp}: \${Object.keys(matcher).join(" | ")}}\`;
                    ctx.addIssue({
                        code: "invalid_union",
                        unionErrors: [prev.result.error],
                        message: \`Invalid discriminated union: expected input to match with discriminator \${expected} but received discriminator: (\${
                            discriminatorWithValue ?? ""
                        }) \`,
                    });
                }
            })
            .transform((v) => (v.result.success ? v.result.data : v.val)) as unknown as Schemas<T>;
    }
    export function match<T extends Matcher>(union: z.infer<Schemas<T>>, matcher: T, discriminator: Discriminator<T>): T {
        const handlerKey = union[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher[handlerKey] as z.Schema).parse(union) : matcher.onDefault.parse(union);
    }
    export function matchSafe<T extends Matcher>(
        union: z.infer<Schemas<T>>,
        matcher: T,
        discriminator: Discriminator<T>
    ): z.SafeParseSuccess<Schemas<T>> | z.SafeParseError<z.ZodError> {
        const handlerKey = union?.[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher?.[handlerKey] as z.Schema)?.safeParse(union) : matcher.onDefault.safeParse(union);
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\configuration.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\index.ts 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";

"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\zod.ts 1`] = `
"import { z } from 'zod'
import * as zc from './common.js'

export module Schemas {
    export const PetBase = z.object({ id: z.number().int(), type: z.string() });
    export const Dog = PetBase.merge(z.object({ bark: z.string(), type: z.literal('DOG') }));
    export const Cat = PetBase.merge(z.object({ color: z.string(), type: z.literal('CAT') }));
    export const Pet = zc.ZodUnionMatch.matcher("type", { 'CAT': Cat, 'DOG': Dog, onDefault: z.object({ type: z.string().brand("UNKNOWN") }) }).passthrough();
    export const Pets = z.array(Pet).max(100);

    export module Types {
        export type PetBase = z.infer<typeof Schemas.PetBase>;
        export type Dog = z.infer<typeof Schemas.Dog>;
        export type Cat = z.infer<typeof Schemas.Cat>;
        export type Pet = z.infer<typeof Schemas.Pet>;
        export type Pets = z.infer<typeof Schemas.Pets>;
    }

}
"
`;

exports[`Generate Integration all test/specs/pets-simple/pets-api.yml: generate-openapi-B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\integration\\test\\specs\\pets-simple\\zod-common.ts 1`] = `
"import { z } from 'zod'

export module ZodUnionMatch {
// export type UNKNOWN = string & z.BRAND<"UNKNOWN">;
    export type Matcher = Record<string, z.ZodSchema>;

    export type Schemas<T extends Matcher> = T[keyof T];
    export type Discriminator<T extends Matcher> = keyof z.infer<T[keyof T]>;

    export function matcher<T extends Matcher>(discriminator: Discriminator<T>, matcher: T): Schemas<T> {
        return z
            .custom<T>()
            .transform((val) => {
                const result = matchSafe(val, matcher, discriminator);
                return {result, val};
            })
            .superRefine((prev, ctx) => {
                if (!prev.result.success) {
                    const discriminatorValue = prev.val?.[discriminator];
                    const discriminatorProp = JSON.stringify(discriminator);
                    const discriminatorWithValue = \`\${discriminatorProp}: \${discriminatorValue}\`;
                    const expected =
                        typeof discriminatorValue === "string" && discriminatorValue in matcher
                            ? "respective schema"
                            : \`{\${discriminatorProp}: \${Object.keys(matcher).join(" | ")}}\`;
                    ctx.addIssue({
                        code: "invalid_union",
                        unionErrors: [prev.result.error],
                        message: \`Invalid discriminated union: expected input to match with discriminator \${expected} but received discriminator: (\${
                            discriminatorWithValue ?? ""
                        }) \`,
                    });
                }
            })
            .transform((v) => (v.result.success ? v.result.data : v.val)) as unknown as Schemas<T>;
    }

    export function match<T extends Matcher>(union: z.infer<Schemas<T>>, matcher: T, discriminator: Discriminator<T>): T {
        const handlerKey = union[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher[handlerKey] as z.Schema).parse(union) : matcher.onDefault.parse(union);
    }

    export function matchSafe<T extends Matcher>(
        union: z.infer<Schemas<T>>,
        matcher: T,
        discriminator: Discriminator<T>
    ): z.SafeParseSuccess<Schemas<T>> | z.SafeParseError<z.ZodError> {
        const handlerKey = union?.[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher?.[handlerKey] as z.Schema)?.safeParse(union) : matcher.onDefault.safeParse(union);
    }
}
"
`;

exports[`Generate Integration ts test/specs/generic/api.yml: cleaned-test/specs/generic/api.yml 1`] = `
[
  {
    "content": "/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// Some imports not used depending on template conditions
// @ts-ignore
import { UNKNOWN_ENUM_VARIANT, DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common.js';
import type { RequestArgs } from './base.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base.js';

    
        /**
* @type Cat
* @export
* @discriminatedUnion Cat
* @discriminatorProperty catType
* @discriminatorValues SEAM | SHORT
* @subTypes Seam | ShortHair
*/
export type Cat = { catType: 'SEAM' } & Seam | { catType: 'SHORT' } & ShortHair | { catType: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Cat {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Cat, R> = {
        [K in T as K['catType']]: Handler<Extract<T, { type: K['catType'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Cat,
        handler: MatchObj<Cat, R>
    ): R {
        if (union.catType in handler) {
            return handler[union.catType](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Cat,
        handler: Partial<MatchObj<Cat, R>>
    ): R | undefined {
        if (union.catType in handler) {
            return handler[union.catType]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
    
        /**
 * 
 * @export
 * @interface CatBase
 */
export interface CatBase {
    /**
     * 
     * @type {string}
     * @memberof CatBase
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof CatBase
     * @discriminator catType
     */
    catType?: CatBaseCatTypeEnum;
}


export const CatBaseCatTypeEnum = {
    Seam: 'SEAM',
    Short: 'SHORT'
} as const;

export module CatBaseCatTypeEnums {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends CatBaseCatTypeEnum, R> = {
        [K in T as K]: Handler<Extract<T, K>, R>;
    }  & { onDefault: Handler<unknown, R> };
    /** All handler must return the same type*/
    export function match<R>(enumValue: CatBaseCatTypeEnum, handler: MatchObj<CatBaseCatTypeEnum, R>): R {
        if (enumValue in handler) {
            return handler[enumValue](enumValue as never);
        }
        return handler.onDefault(enumValue);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(enumValue: CatBaseCatTypeEnum, handler: Partial<MatchObj<CatBaseCatTypeEnum, R> >): R | undefined {
        if (enumValue in handler) {
            return handler[enumValue]?.(enumValue as never);
        }
        return handler.onDefault?.(enumValue);
    }
}

export type CatBaseCatTypeEnum = typeof CatBaseCatTypeEnum[keyof typeof CatBaseCatTypeEnum] | UNKNOWN_ENUM_VARIANT  ;

    
        /**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    bark: string;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    type: 'DOG';
}
    
        /**
 * 
 * @export
 * @interface GenericPet
 */
export interface GenericPet extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof GenericPet
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericPet
     */
    type: 'BIRD' | 'HAMSTER';
}
    
        /**
* @type Pet
* @export
* @discriminatedUnion Pet
* @discriminatorProperty type
* @discriminatorValues BIRD | CAT | DOG | HAMSTER
* @subTypes GenericPet | Cat | Dog | GenericPet
*/
export type Pet = { type: 'BIRD' } & GenericPet | { type: 'CAT' } & Cat | { type: 'DOG' } & Dog | { type: 'HAMSTER' } & GenericPet | { type: UNKNOWN_ENUM_VARIANT, [prop:string]:unknown};

export module Pet {
    type Handler<I, R> = (e: I) => R;
    type MatchObj<T extends Pet, R> = {
        [K in T as K['type']]: Handler<Extract<T, { type: K['type'] }>, R>
    } & { onDefault: Handler<unknown, R> };

    /** All handler must return the same type*/
    export function match<R>(
        union: Pet,
        handler: MatchObj<Pet, R>
    ): R {
        if (union.type in handler) {
            return handler[union.type](union as never);
        }
        return handler.onDefault(union);
    }

    /** All handler must return the same type*/
    export function matchPartial<R>(
        union: Pet,
        handler: Partial<MatchObj<Pet, R>>
    ): R | undefined {
        if (union.type in handler) {
            return handler[union.type]?.(union as never);
        }
        return handler.onDefault?.(union);
    }

}
        
        
        
    
        /**
 * 
 * @export
 * @interface PetBase
 */
export interface PetBase {
    /**
     * 
     * @type {number}
     * @memberof PetBase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PetBase
     * @discriminator type
     */
    type: string;
}
    
        /**
 * 
 * @export
 * @interface Seam
 */
export interface Seam extends PetBase {
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     * @discriminator catType
     */
    catType: 'SEAM';
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof Seam
     */
    type: 'CAT';
}
    
        /**
 * 
 * @export
 * @interface ShortHair
 */
export interface ShortHair {
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     * @discriminator catType
     */
    catType: 'SHORT';
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    angryLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof ShortHair
     */
    type: 'CAT';
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('getPet', 'petId', petId)
            const localVarPath = \`/pets/{petId}\`
                .replace(\`{\${"petId"}}\`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = \`/pets\`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPet(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPet(petId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a Pet
         * @param {string} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet(petId: string, options?: any): AxiosPromise<Pet> {
            return localVarFp.getPet(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get a Pet
     * @param {string} petId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPet(petId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPet(petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }
}



",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\api.ts",
  },
  {
    "content": "/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\base.ts",
  },
  {
    "content": "openapi: 3.0.3
info:
  version: 1.0.1
  title: some title
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
  /pets/{petId}:
    get:
      summary: Get a Pet
      operationId: getPet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
components:
  schemas:
    PetBase:
      title: PetBase
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
          minimum: 1
          exclusiveMaximum: true
          format: int64
        type:
          type: string
      discriminator:
        propertyName: type
    Dog:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - properties:
            bark:
              type: string
            type:
              type: string
              x-const: DOG
              example: DOG
          required:
            - bark
            - type
    CatBase:
      allOf:
        - {}
        - title: CatBase
          properties:
            color:
              type: string
            catType:
              type: string
              enum:
                - SEAM
                - SHORT
              title: CatType
          required:
            - color
          discriminator:
            propertyName: catType
    Seam:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - title: Seam
          required:
            - color
            - catType
            - type
          discriminator:
            propertyName: catType
          properties:
            color:
              type: string
            catType:
              type: string
              title: CatType
              default: SEAM
              maxLength: 3
              minLength: 1
              x-const: SEAM
              example: SEAM
            angryLevel:
              type: string
              pattern: \\w+
            type:
              type: string
              x-const: CAT
              example: CAT
    ShortHair:
      title: ShortHair
      required:
        - color
        - catType
        - type
      discriminator:
        propertyName: catType
      properties:
        color:
          type: string
        catType:
          type: string
          title: CatType
          default: SHORT
          x-const: SHORT
          example: SHORT
        angryLevel:
          type: string
        type:
          type: string
          x-const: CAT
          example: CAT
    Cat:
      oneOf:
        - $ref: '#/components/schemas/Seam'
        - $ref: '#/components/schemas/ShortHair'
      discriminator:
        propertyName: catType
        mapping:
          SEAM: '#/components/schemas/Seam'
          SHORT: '#/components/schemas/ShortHair'
    GenericPet:
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - title: GenericPet
          properties:
            name:
              type: string
            type:
              type: string
              x-const:
                - BIRD
                - HAMSTER
              example: HAMSTER
          required:
            - type
    Pet:
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
        - $ref: '#/components/schemas/GenericPet'
      discriminator:
        propertyName: type
        mapping:
          DOG: '#/components/schemas/Dog'
          CAT: '#/components/schemas/Cat'
          BIRD: '#/components/schemas/GenericPet'
          HAMSTER: '#/components/schemas/GenericPet'
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\bundled-api.yml",
  },
  {
    "content": "/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from "./configuration.js";
import type {RequestArgs} from "./base.js";
import type {AxiosInstance, AxiosResponse} from 'axios';
import {RequiredError} from "./base.js";
import { z } from "zod";

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, \`Required parameter \${paramName} was null or undefined when calling \${functionName}.\`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {username: configuration.username, password: configuration.password};
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], \`\${key}\${key !== '' ? '.' : ''}\${currentKey}\`)
            );
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

declare const tag: unique symbol;
export type UNKNOWN_ENUM_VARIANT = string & { readonly [tag]: "UNKNOWN"; };

export module ZodUnionMatch {
    // export type UNKNOWN = string & z.BRAND<"UNKNOWN">;
    export type Matcher = Record<string, z.ZodSchema>;

    export type Schemas<T extends Matcher> = T[keyof T];
    export type Discriminator<T extends Matcher> = keyof z.infer<T[keyof T]>;
    export function matcher<T extends Matcher>(discriminator: Discriminator<T>, matcher: T): Schemas<T> {
        return z
            .custom<T>()
            .transform((val) => {
                const result = matchSafe(val, matcher, discriminator);
                return { result, val };
            })
            .superRefine((prev, ctx) => {
                if (!prev.result.success) {
                    const discriminatorValue = prev.val?.[discriminator];
                    const discriminatorProp = JSON.stringify(discriminator);
                    const discriminatorWithValue = \`\${discriminatorProp}: \${discriminatorValue}\`;
                    const expected =
                        typeof discriminatorValue === "string" && discriminatorValue in matcher
                            ? "respective schema"
                            : \`{\${discriminatorProp}: \${Object.keys(matcher).join(" | ")}}\`;
                    ctx.addIssue({
                        code: "invalid_union",
                        unionErrors: [prev.result.error],
                        message: \`Invalid discriminated union: expected input to match with discriminator \${expected} but received discriminator: (\${
                            discriminatorWithValue ?? ""
                        }) \`,
                    });
                }
            })
            .transform((v) => (v.result.success ? v.result.data : v.val)) as unknown as Schemas<T>;
    }
    export function match<T extends Matcher>(union: z.infer<Schemas<T>>, matcher: T, discriminator: Discriminator<T>): T {
        const handlerKey = union[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher[handlerKey] as z.Schema).parse(union) : matcher.onDefault.parse(union);
    }
    export function matchSafe<T extends Matcher>(
        union: z.infer<Schemas<T>>,
        matcher: T,
        discriminator: Discriminator<T>
    ): z.SafeParseSuccess<Schemas<T>> | z.SafeParseError<z.ZodError> {
        const handlerKey = union?.[discriminator] as keyof typeof matcher;
        return handlerKey in matcher ? (matcher?.[handlerKey] as z.Schema)?.safeParse(union) : matcher.onDefault.safeParse(union);
    }
}
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\common.ts",
  },
  {
    "content": "/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\configuration.ts",
  },
  {
    "content": "/* tslint:disable */
/* eslint-disable */
/**
 * some title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api.js";
export * from "./configuration.js";
export * from "./zod.js";

",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\index.ts",
  },
  {
    "content": "import { z } from 'zod'
import * as zc from './common.js'

export module Schemas {
    export const PetBase = z.object({ id: z.number().int().min(1), type: z.string() });
    export const GenericPet = PetBase.merge(z.object({ name: z.string().optional(), type: z.enum(['BIRD', 'HAMSTER']) }));
    export const Dog = PetBase.merge(z.object({ bark: z.string(), type: z.literal('DOG') }));
    export const ShortHair = z.object({ color: z.string(), catType: z.literal('SHORT'), angryLevel: z.string().optional(), type: z.literal('CAT') });
    export const Seam = PetBase.merge(z.object({ color: z.string(), catType: z.literal('SEAM'), angryLevel: z.string().regex(/\\w+/).optional(), type: z.literal('CAT') }));
    export const Cat = zc.ZodUnionMatch.matcher("catType", { 'SEAM': Seam, 'SHORT': ShortHair, onDefault: z.object({ catType: z.string().brand("UNKNOWN") }) }).passthrough();
    export const Pet = zc.ZodUnionMatch.matcher("type", { 'DOG': Dog, 'BIRD': GenericPet, 'HAMSTER': GenericPet, onDefault: z.object({ type: z.string().brand("UNKNOWN") }) }).passthrough();
    export const Pets = z.array(Pet).max(100);

    export module Types {
        export type PetBase = z.infer<typeof Schemas.PetBase>;
        export type GenericPet = z.infer<typeof Schemas.GenericPet>;
        export type Dog = z.infer<typeof Schemas.Dog>;
        export type ShortHair = z.infer<typeof Schemas.ShortHair>;
        export type Seam = z.infer<typeof Schemas.Seam>;
        export type Cat = z.infer<typeof Schemas.Cat>;
        export type Pet = z.infer<typeof Schemas.Pet>;
        export type Pets = z.infer<typeof Schemas.Pets>;
    }

}
",
    "src": "B:\\dev\\js\\ts-modules-remote\\packages\\openapi\\test\\out\\post\\test\\specs\\generic\\zod.ts",
  },
]
`;
