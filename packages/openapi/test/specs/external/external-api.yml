openapi: "3.0.3"
info:
  version: 1.0.0
  title: Swagger External API
  license:
    name: MIT
servers:
  - url: http://external.swagger.io/v1
paths:
  /pet-toys:
    get:
      summary: List all pet-toys
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            maximum: 100
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetToyList"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    PetToyList:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/PetToy"
    PetToy:
      oneOf:
        - $ref: './another-external-api.yml#/components/schemas/Ball'
        - $ref: '#/components/schemas/FluffyTeddy'
      discriminator:
        propertyName: kind
        mapping:
          BALL: "./another-external-api.yml#/components/schemas/Ball"
          TEDDY: "#/components/schemas/FluffyTeddy"

    Toy:
      allOf:
        - $ref: './another-external-api.yml#/components/schemas/Toy'
      title: Toy
      properties:
        id: {type: string}
        price: {type: string}
        kind: {type: string}
        someEnum: { type: string, enum: [ FOO, BAR ], title: FooBar}

    FluffyTeddy:
      allOf:
        - $ref: './another-external-api.yml#/components/schemas/Teddy'
        - $ref: '#/components/schemas/Fluffy'

    Fluffy:
      properties:
        fluffLevel:
          $ref: '#/components/schemas/FluffLevel'

    FluffLevel: { type: string, enum: [ A, B ,C]}

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string





